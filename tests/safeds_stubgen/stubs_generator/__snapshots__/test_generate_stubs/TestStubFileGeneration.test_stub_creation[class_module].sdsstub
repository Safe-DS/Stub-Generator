@PythonModule("tests.data.various_modules_package.class_module")
package tests.data.variousModulesPackage.classModule

from tests.data.mainPackage.anotherPath.anotherModule import yetAnotherClass

class ClassModuleEmptyClassA()

class ClassModuleClassB(
    a: Int,
    b: ClassModuleEmptyClassA?
) sub ClassModuleEmptyClassA {
    // TODO Result type information missing.
    @Pure
    fun f()
}

// TODO Safe-DS does not support multiple inheritance.
class ClassModuleClassC() sub ClassModuleEmptyClassA, ClassModuleClassB, yetAnotherClass {
    @PythonName("attr_1")
    static attr attr1: Int
    @PythonName("attr_2")
    static attr attr2: Int

    // TODO Result type information missing.
    @Pure
    fun f1()
}

class ClassModuleClassD() {
    class ClassModuleNestedClassE() {
        @PythonName("nested_attr_1")
        static attr nestedAttr1: Nothing?

        @PythonName("_ClassModulePrivateDoubleNestedClassF")
        class ClassModulePrivateDoubleNestedClassF()

        // TODO Result type information missing.
        @Pure
        @PythonName("class_e_func")
        fun classEFunc()
    }
}

class SelfTypes1() {
    @Pure
    @PythonName("self_result1")
    fun selfResult1() -> result1: SelfTypes1
}

class SelfTypes2() sub SelfTypes1 {
    @Pure
    @PythonName("self_result2")
    fun selfResult2() -> result1: SelfTypes2

    @Pure
    @PythonName("infer_self_result2")
    fun inferSelfResult2() -> result1: SelfTypes2
}
