/**
 * Test module for Numpy docstring tests.
 *
 * A module for testing the various docstring types.
 */

@PythonModule("tests.data.docstring_parser_package.numpydoc")
package tests.data.docstringParserPackage.numpydoc

from tests.data.variousModulesPackage.anotherPath.anotherModule import AnotherClass

/**
 * function_with_documentation. Code::
 *
 *     pass
 *
 * Dolor sit amet.
 */
@Pure
@PythonName("function_with_documentation")
fun functionWithDocumentation()

@Pure
@PythonName("function_without_documentation")
fun functionWithoutDocumentation()

// TODO Safe-DS does not support variadic parameters.
// TODO Some parameter have no type information.
/**
 * function_with_parameters.
 *
 * Dolor sit amet.
 *
 * @param noTypeNoDefault foo: no_type_no_default. Code::
 *
 *     pass
 * @param typeNoDefault foo: type_no_default
 * @param optionalUnknownDefault foo: optional_unknown_default
 * @param withDefaultSyntax1 foo: with_default_syntax_1
 * @param withDefaultSyntax2 foo: with_default_syntax_2
 * @param withDefaultSyntax3 foo: with_default_syntax_3
 * @param groupedParameter1 foo: grouped_parameter_1 and grouped_parameter_2
 * @param groupedParameter2 foo: grouped_parameter_1 and grouped_parameter_2
 * @param args foo: *args
 * @param kwargs foo: **kwargs
 */
@Pure
@PythonName("function_with_parameters")
fun functionWithParameters(
    @PythonName("no_type_no_default") noTypeNoDefault,
    @PythonName("type_no_default") typeNoDefault: Int,
    @PythonName("optional_unknown_default") optionalUnknownDefault: Int,
    @PythonName("with_default_syntax_1") withDefaultSyntax1: Int = 1,
    @PythonName("with_default_syntax_2") withDefaultSyntax2: Int = 2,
    @PythonName("with_default_syntax_3") withDefaultSyntax3: Int = 3,
    @PythonName("grouped_parameter_1") groupedParameter1: Int = 4,
    @PythonName("grouped_parameter_2") groupedParameter2: Int = 4,
    args: Int = [],
    kwargs: Map<String, Int> = {}
)

/**
 * function_with_result_value_and_type.
 *
 * Dolor sit amet.
 *
 * @result result1 this will be the return value
 */
@Pure
@PythonName("function_with_result_value_and_type")
fun functionWithResultValueAndType() -> result1: Boolean

/**
 * function_with_named_result.
 *
 * Dolor sit amet.
 *
 * @result namedResult this will be the return value
 */
@Pure
@PythonName("function_with_named_result")
fun functionWithNamedResult() -> namedResult: Boolean

/**
 * function_with_named_result.
 *
 * Dolor sit amet.
 *
 * @result firstResult first result
 * @result secondResult second result
 */
@Pure
@PythonName("function_with_multiple_results")
fun functionWithMultipleResults() -> (firstResult: Int, secondResult: Boolean)

// TODO Result type information missing.
/**
 * function_without_result_value.
 *
 * Dolor sit amet.
 */
@Pure
@PythonName("function_without_result_value")
fun functionWithoutResultValue()

// TODO Result type information missing.
/**
 * uninferable_return_doc.
 *
 * Dolor sit amet.
 */
@Pure
@PythonName("uninferable_return_doc")
fun uninferableReturnDoc()

/**
 * property_method_with_docstring.
 *
 * Dolor sit amet.
 *
 * @result firstResult This is the first result
 * @result secondResult This is the second result
 */
@Pure
@PythonName("infer_types")
fun inferTypes() -> (firstResult: Boolean, secondResult: String)

/**
 * property_method_with_docstring.
 *
 * Dolor sit amet.
 *
 * @param a The first parameter
 * @param b The second parameter
 *
 * @result funcResult This is the result
 */
@Pure
@PythonName("infer_types2")
fun inferTypes2(
    a: String,
    b: Boolean
) -> funcResult: union<Boolean, Int, String>

/**
 * property_method_with_docstring.
 *
 * Dolor sit amet.
 *
 * @param a The first parameter
 * @param b The second parameter
 *
 * @result funcResult This is the result
 * @result funcResult2 This is the second result
 */
@Pure
@PythonName("infer_types3")
fun inferTypes3(
    a: String,
    b: Boolean
) -> (result1: union<Boolean, Int, String>, funcResult2: Int)

/**
 * numpy_sequence_types.
 *
 * Dolor sit amet.
 *
 * @result namedResult this will be the return value
 */
@Pure
@PythonName("numpy_sequence_types")
fun numpySequenceTypes(
    a: SequenceTypeVar<List<Any>>
) -> namedResult: SequenceTypeVar2<Int>

/**
 * numpy_named_result_without_type
 *
 * @result namedResult this will be the return value
 */
@Pure
@PythonName("numpy_named_result_without_type")
fun numpyNamedResultWithoutType() -> namedResult: String

/**
 * numpy_named_result_without_type_inferred
 *
 * @result namedResult this will be the return value
 */
@Pure
@PythonName("numpy_named_result_without_type_inferred")
fun numpyNamedResultWithoutTypeInferred() -> namedResult: String

/**
 * @example
 * pipeline example {
 *     // print(1+1)
 * }
 *
 * @example
 * pipeline example {
 *     // x = 2 - 1
 *     // print(x)
 * }
 */
@Pure
@PythonName("function_with_example")
fun functionWithExample()

/**
 * numpy_named_result_without_type_inferred
 *
 * @result namedResult this will be the return value
 */
@Pure
@PythonName("numpy_named_result_with_more_hints_than_docstring_types")
fun numpyNamedResultWithMoreHintsThanDocstringTypes() -> (namedResult: Int, result1: String)

/**
 * ClassWithDocumentation. Code::
 *
 *     pass
 *
 * Dolor sit amet.
 */
class ClassWithDocumentation()

class ClassWithoutDocumentation()

/**
 * ClassWithParameters.
 *
 * Dolor sit amet.
 *
 * @param p foo
 * @param groupedParameter1 foo: grouped_parameter_1 and grouped_parameter_2
 * @param groupedParameter2 foo: grouped_parameter_1 and grouped_parameter_2
 */
class ClassWithParameters(
    p: Int = 1,
    @PythonName("grouped_parameter_1") groupedParameter1: Int = 4,
    @PythonName("grouped_parameter_2") groupedParameter2: Int = 4
)

/**
 * ClassAndConstructorWithParameters
 *
 * Dolor sit amet.
 *
 * @param x Lorem ipsum 1.
 * @param y Lorem ipsum 2.
 * @param z Lorem ipsum 3.
 */
class ClassAndConstructorWithParameters(
    x: String,
    y: String,
    z: Int = 5
)

/**
 * ClassAndConstructorWithParameters
 *
 * Dolor sit amet.
 */
class ClassAndConstructorWithAttributes() {
    /**
     * Lorem ipsum 1.
     */
    static attr x: String
    /**
     * Lorem ipsum 3.
     */
    static attr z: Int
    /**
     * Lorem ipsum 2.
     */
    static attr y: String
}

/**
 * ClassWithParametersAndAttributes.
 *
 * Dolor sit amet.
 *
 * @param x foo
 */
class ClassWithParametersAndAttributes(
    x: Int = 1
) {
    /**
     * foo
     */
    static attr p: Int
    /**
     * foo
     */
    static attr q: Int
}

/**
 * ClassWithAttributes.
 *
 * Dolor sit amet.
 */
class ClassWithAttributes() {
    /**
     * foo: no_type_no_default. Code::
     *
     *     pass
     */
    @PythonName("no_type_no_default")
    static attr noTypeNoDefault: String
    /**
     * foo: type_no_default
     */
    @PythonName("type_no_default")
    static attr typeNoDefault: Int
    /**
     * foo: optional_unknown_default
     */
    @PythonName("optional_unknown_default")
    static attr optionalUnknownDefault: Int?
    /**
     * foo: with_default_syntax_1
     */
    @PythonName("with_default_syntax_1")
    static attr withDefaultSyntax1: Int
    /**
     * foo: with_default_syntax_2
     */
    @PythonName("with_default_syntax_2")
    static attr withDefaultSyntax2: Int
    /**
     * foo: with_default_syntax_3
     */
    @PythonName("with_default_syntax_3")
    static attr withDefaultSyntax3: Int
    @PythonName("grouped_attribute_1")
    static attr groupedAttribute1: Int
    @PythonName("grouped_attribute_2")
    static attr groupedAttribute2: Int
}

class ClassWithMethod() {
    /**
     * property_method_with_docstring.
     *
     * Dolor sit amet.
     */
    @PythonName("property_method_with_docstring") attr propertyMethodWithDocstring: Boolean

    // TODO Some parameter have no type information.
    /**
     * method_with_docstring.
     *
     * Dolor sit amet.
     *
     * @result namedResult this will be the return value
     */
    @Pure
    @PythonName("method_with_docstring")
    fun methodWithDocstring(
        a
    ) -> namedResult: Boolean
}

// TODO List type has to many type arguments.
// TODO Safe-DS does not support set types.
// TODO Safe-DS does not support tuple types.
// TODO Set type has to many type arguments.
// TODO Some parameter have no type information.
class ClassWithVariousParameterTypes(
    @PythonName("no_type") noType,
    @PythonName("optional_type") optionalType: Int,
    @PythonName("none_type") noneType: Nothing?,
    @PythonName("int_type") intType: Int,
    @PythonName("bool_type") boolType: Boolean,
    @PythonName("str_type") strType: String,
    @PythonName("float_type") floatType: Float,
    @PythonName("multiple_types") multipleTypes: Tuple<Int, Boolean>,
    @PythonName("list_type_1") listType1: List<Any>,
    @PythonName("list_type_2") listType2: List<String>,
    @PythonName("list_type_3") listType3: List<Int, Boolean>,
    @PythonName("list_type_4") listType4: List<List<Int>>,
    @PythonName("list_type_5") listType5,
    @PythonName("set_type_1") setType1: Set<Any>,
    @PythonName("set_type_2") setType2: Set<String>,
    @PythonName("set_type_3") setType3: Set<Int, Boolean>,
    @PythonName("set_type_4") setType4: Set<List<Int>>,
    @PythonName("set_type_5") setType5,
    @PythonName("tuple_type_1") tupleType1: Tuple<>,
    @PythonName("tuple_type_2") tupleType2: Tuple<String>,
    @PythonName("tuple_type_3") tupleType3: Tuple<Int, Boolean>,
    @PythonName("tuple_type_4") tupleType4: Tuple<List<Int>>,
    @PythonName("any_type") anyType: Any,
    @PythonName("optional_type_2") optionalType2: Int?,
    @PythonName("class_type") classType: ClassWithAttributes,
    @PythonName("imported_type") importedType: AnotherClass
)

class ClassWithVariousAttributeTypes() {
    @PythonName("no_type")
    static attr noType: String
    @PythonName("optional_type")
    static attr optionalType: String
    @PythonName("none_type")
    static attr noneType: String
    @PythonName("int_type")
    static attr intType: String
    @PythonName("bool_type")
    static attr boolType: String
    @PythonName("str_type")
    static attr strType: String
    @PythonName("float_type")
    static attr floatType: String
    @PythonName("multiple_types")
    static attr multipleTypes: String
    @PythonName("list_type_1")
    static attr listType1: String
    @PythonName("list_type_2")
    static attr listType2: String
    @PythonName("list_type_3")
    static attr listType3: String
    @PythonName("list_type_4")
    static attr listType4: String
    @PythonName("set_type_1")
    static attr setType1: String
    @PythonName("set_type_2")
    static attr setType2: String
    @PythonName("set_type_3")
    static attr setType3: String
    @PythonName("set_type_4")
    static attr setType4: String
    @PythonName("tuple_type_1")
    static attr tupleType1: String
    @PythonName("tuple_type_2")
    static attr tupleType2: String
    @PythonName("tuple_type_3")
    static attr tupleType3: String
    @PythonName("tuple_type_4")
    static attr tupleType4: String
    @PythonName("any_type")
    static attr anyType: Any
    @PythonName("optional_type_2")
    static attr optionalType2: Int?
    @PythonName("class_type")
    static attr classType: ClassWithAttributes
    @PythonName("imported_type")
    static attr importedType: AnotherClass
    // TODO Attribute has no type information.
    @PythonName("callable_type")
    static attr callableType
    @PythonName("mapping_type")
    static attr mappingType: Map<Int, String>
    @PythonName("bool_op_type")
    static attr boolOpType: union<Boolean, Int, String>
    @PythonName("list_type_5")
    static attr listType5: List<Int>
}

/**
 * NumpyClassWithExamples.
 *
 * Dolor sit amet.
 *
 * @example
 * pipeline example {
 *     // from tests.data.docstring_parser_package.numpydoc import NumpyClassWithExamples
 *     // class_ = (
 *     //     NumpyClassWithExamples
 *     // )
 * }
 */
class NumpyClassWithExamples() {
    // TODO Result type information missing.
    /**
     * @example
     * pipeline example {
     *     // from tests.data.docstring_parser_package.numpydoc import NumpyClassWithExamples
     *     // func = (
     *     //     NumpyClassWithExamples.numpy_func_with_examples
     *     // )
     *     // func()
     * }
     */
    @Pure
    @PythonName("numpy_func_with_examples")
    fun numpyFuncWithExamples()
}

/**
 * @example
 * pipeline example {
 *     // print(1+1)
 * }
 *
 * @example
 * pipeline example {
 *     // x = 2 - 1
 *     // print(x)
 * }
 */
class ClassWithExample()

/**
 * EnumDocstring.
 *
 * Dolor sit amet.
 */
enum EnumDocstring
