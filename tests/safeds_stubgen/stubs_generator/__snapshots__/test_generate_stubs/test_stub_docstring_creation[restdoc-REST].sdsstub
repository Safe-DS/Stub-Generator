/**
 * Test module for ReST docstring tests.
 *
 * A module for testing the various docstring types.
 */

@PythonModule("tests.data.docstring_parser_package.restdoc")
package tests.data.docstringParserPackage.restdoc

from tests.data.variousModulesPackage.anotherPath.anotherModule import AnotherClass

/**
 * function_with_documentation. Code::
 *
 *     pass
 *
 * Dolor sit amet.
 */
@Pure
@PythonName("function_with_documentation")
fun functionWithDocumentation()

@Pure
@PythonName("function_without_documentation")
fun functionWithoutDocumentation()

// TODO Safe-DS does not support variadic parameters.
// TODO Some parameter have no type information.
/**
 * function_with_parameters.
 *
 * Dolor sit amet.
 *
 * @param noTypeNoDefault no type and no default
 * @param optionalUnknownDefault optional type
 * @param typeNoDefault type but no default
 * @param withDefault foo that defaults to 2
 * @param args foo: *args
 * @param kwargs foo: **kwargs
 */
@Pure
@PythonName("function_with_parameters")
fun functionWithParameters(
    @PythonName("no_type_no_default") noTypeNoDefault,
    @PythonName("optional_unknown_default") optionalUnknownDefault: Int?,
    @PythonName("type_no_default") typeNoDefault: Int,
    @PythonName("with_default") withDefault: Int,
    args: Int = [],
    kwargs: Map<String, Int> = {}
)

/**
 * function_with_return_value_and_type.
 *
 * Dolor sit amet.
 *
 * @result result1 return value
 */
@Pure
@PythonName("function_with_return_value_and_type")
fun functionWithReturnValueAndType() -> result1: Boolean

/**
 * function_with_return_value_no_type.
 *
 * Dolor sit amet.
 *
 * @result result1 return value
 */
@Pure
@PythonName("function_with_return_value_no_type")
fun functionWithReturnValueNoType()

/**
 * function_with_named_result.
 *
 * Dolor sit amet.
 *
 * @result result1 second result
 */
@Pure
@PythonName("function_with_multiple_results")
fun functionWithMultipleResults() -> (result1: Int, result2: Boolean)

// TODO Result type information missing.
/**
 * function_without_return_value.
 *
 * Dolor sit amet.
 */
@Pure
@PythonName("function_without_return_value")
fun functionWithoutReturnValue()

/**
 * property_method_with_docstring.
 *
 * Dolor sit amet.
 *
 * @result result1 return value
 */
@Pure
@PythonName("infer_types")
fun inferTypes() -> (result1: String, result2: Int)

/**
 * property_method_with_docstring.
 *
 * Dolor sit amet.
 *
 * @param a The first parameter
 * @param b The second parameter
 *
 * @result result1 return value
 */
@Pure
@PythonName("infer_types2")
fun inferTypes2(
    a: Int,
    b: literal<false, true>
) -> result1: union<Boolean, String>

// TODO Result type information missing.
/**
 * uninferable_return_doc.
 *
 * Dolor sit amet.
 *
 * @result result1 return value
 */
@Pure
@PythonName("uninferable_return_doc")
fun uninferableReturnDoc()

/**
 * ClassWithDocumentation. Code::
 *
 *     pass
 *
 * Dolor sit amet.
 */
class ClassWithDocumentation()

class ClassWithoutDocumentation()

/**
 * ClassWithParameters.
 *
 * Dolor sit amet.
 *
 * @param p foo defaults to 1
 */
class ClassWithParameters(
    p: Int
)

class ClassWithMethod() {
    /**
     * property_method_with_docstring.
     *
     * Dolor sit amet.
     */
    @PythonName("property_method_with_docstring") attr propertyMethodWithDocstring: Boolean

    /**
     * method_with_docstring.
     *
     * Dolor sit amet.
     *
     * @param a type but no default
     *
     * @result result1 return value
     */
    @Pure
    @PythonName("method_with_docstring")
    fun methodWithDocstring(
        a: Int
    ) -> result1: Boolean
}

// TODO List type has to many type arguments.
// TODO Safe-DS does not support set types.
// TODO Safe-DS does not support tuple types.
// TODO Set type has to many type arguments.
// TODO Some parameter have no type information.
class ClassWithVariousParameterTypes(
    @PythonName("no_type") noType,
    @PythonName("optional_type") optionalType: Int?,
    @PythonName("none_type") noneType: Nothing?,
    @PythonName("int_type") intType: Int,
    @PythonName("bool_type") boolType: literal<false, true>,
    @PythonName("str_type") strType: String,
    @PythonName("float_type") floatType: Float,
    @PythonName("multiple_types") multipleTypes: literal<false, true>,
    @PythonName("list_type_1") listType1: List<Any>,
    @PythonName("list_type_2") listType2: List<String>,
    @PythonName("list_type_3") listType3: literal<false, true>,
    @PythonName("list_type_4") listType4: List<List<Int>>,
    @PythonName("list_type_5") listType5,
    @PythonName("set_type_1") setType1: Set<Any>,
    @PythonName("set_type_2") setType2: Set<String>,
    @PythonName("set_type_3") setType3: literal<false, true>,
    @PythonName("set_type_4") setType4: Set<List<Int>>,
    @PythonName("set_type_5") setType5,
    @PythonName("tuple_type_1") tupleType1: Tuple<>,
    @PythonName("tuple_type_2") tupleType2: Tuple<String>,
    @PythonName("tuple_type_3") tupleType3: literal<false, true>,
    @PythonName("tuple_type_4") tupleType4: Tuple<List<Int>>,
    @PythonName("any_type") anyType: Any,
    @PythonName("optional_type_2") optionalType2: Int?,
    @PythonName("class_type") classType: ClassWithMethod,
    @PythonName("imported_type") importedType: AnotherClass
)

/**
 * EnumDocstring.
 *
 * Dolor sit amet.
 */
enum EnumDocstring
