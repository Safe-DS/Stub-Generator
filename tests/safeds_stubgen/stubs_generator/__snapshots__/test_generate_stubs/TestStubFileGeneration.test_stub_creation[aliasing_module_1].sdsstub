@PythonModule("tests.data.various_modules_package.aliasing.aliasing_module_1")
package tests.data.variousModulesPackage.aliasing.aliasingModule1

from tests.data.variousModulesPackage.aliasing.aliasingModule2 import AliasingModule2ClassA
from tests.data.variousModulesPackage.aliasing.aliasingModule3 import ImportMeAliasingModuleClass

class AliasingModuleClassB()

class AliasingModuleClassC() {
    @PythonName("typed_alias_attr")
    static attr typedAliasAttr: AliasingModuleClassB
    // TODO An internal class must not be used as a type in a public class.
    @PythonName("infer_alias_attr")
    static attr inferAliasAttr: _AliasingModuleClassA
    @PythonName("typed_alias_attr2")
    static attr typedAliasAttr2: AliasingModule2ClassA
    @PythonName("infer_alias_attr2")
    static attr inferAliasAttr2: AliasingModule2ClassA
    // TODO Attribute has no type information.
    @PythonName("infer_alias_attr3")
    static attr inferAliasAttr3
    // TODO An internal class must not be used as a type in a public class.
    // TODO List type has to many type arguments.
    @PythonName("alias_list")
    static attr aliasList: List<union<AliasingModuleClassB, _AliasingModuleClassA>, AliasingModule2ClassA, ImportMeAliasingModuleClass>
}
