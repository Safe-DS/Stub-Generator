# serializer version: 1
# name: test_abstract_creation
  '''
  @PythonModule("various_modules_package.abstract_module")
  package variousModulesPackage.abstractModule
  
  class AbstractModuleClass {
  	@PythonName("abstract_property_method") attr abstractPropertyMethod: union<Float, Int>
  
  	// TODO Result type information missing.
  	@Pure
  	@PythonName("abstract_method")
  	fun abstractMethod()
  
  	// TODO List type has to many type arguments.
  	@Pure
  	@PythonName("abstract_method_params")
  	fun abstractMethodParams(
  		@PythonName("param_1") param1: Int,
  		@PythonName("param_2") param2: Boolean = false,
  		@PythonName("param_3") param3: Boolean = true
  	) -> result1: List<String, Int>
  
  	// TODO Result type information missing.
  	@Pure
  	@PythonName("abstract_static_method")
  	static fun abstractStaticMethod()
  
  	@Pure
  	@PythonName("abstract_static_method_params")
  	static fun abstractStaticMethodParams(
  		param: Float
  	) -> result1: Boolean
  }
  
  '''
# ---
# name: test_alias_creation[aliasing_module_1]
  '''
  @PythonModule("various_modules_package.aliasing.aliasing_module_1")
  package variousModulesPackage.aliasing.aliasingModule1
  
  from aliasing_module_2 import AliasingModule2ClassA
  
  class AliasingModuleClassB()
  
  class AliasingModuleClassC() sub _AliasingModuleClassA {
  	@PythonName("typed_alias_attr")
  	static attr typedAliasAttr: AliasingModuleClassB
  	@PythonName("infer_alias_attr")
  	static attr inferAliasAttr: () -> a: _AliasingModuleClassA
  	@PythonName("typed_alias_attr2")
  	static attr typedAliasAttr2: AliasingModule2ClassA
  	@PythonName("infer_alias_attr2")
  	static attr inferAliasAttr2: AliasingModule2ClassA
  	// TODO List type has to many type arguments.
  	@PythonName("alias_list")
  	static attr aliasList: List<union<AliasingModuleClassB, _AliasingModuleClassA>, AliasingModule2ClassA>
  }
  
  '''
# ---
# name: test_alias_creation[aliasing_module_2]
  '''
  @PythonModule("various_modules_package.aliasing.aliasing_module_2")
  package variousModulesPackage.aliasing.aliasingModule2
  
  class AliasingModule2ClassA()
  
  class AliasingModuleClassB()
  
  class AliasingModuleClassC() {
  	@PythonName("typed_alias_attr")
  	static attr typedAliasAttr: AliasingModuleClassB
  	@PythonName("alias_list")
  	static attr aliasList: List<union<AliasingModuleClassB, String>>
  }
  
  '''
# ---
# name: test_class_attribute_creation
  '''
  @PythonModule("various_modules_package.attribute_module")
  package variousModulesPackage.attributeModule
  
  from tests.data.main_package.another_path.another_module import AnotherClass
  
  class AttributesClassA()
  
  class AttributesClassB() {
  	@PythonName("type_hint_public")
  	static attr typeHintPublic: Int
  	@PythonName("no_type_hint_public")
  	static attr noTypeHintPublic: Int
  	@PythonName("object_attr")
  	static attr objectAttr: AttributesClassA
  	// TODO Attribute has no type information.
  	@PythonName("callexpr_attr_class")
  	static attr callexprAttrClass
  	// TODO Attribute has no type information.
  	@PythonName("callexpr_attr_function")
  	static attr callexprAttrFunction
  	// TODO Safe-DS does not support tuple types.
  	@PythonName("tuple_attr_1")
  	static attr tupleAttr1: Tuple<Any>
  	// TODO Safe-DS does not support tuple types.
  	@PythonName("tuple_attr_2")
  	static attr tupleAttr2: Tuple<union<Int, String>>
  	// TODO Safe-DS does not support tuple types.
  	@PythonName("tuple_attr_3")
  	static attr tupleAttr3: Tuple<String, Int>
  	@PythonName("defined_three_times")
  	static attr definedThreeTimes: Int
  	@PythonName("list_attr_1")
  	static attr listAttr1: List<Any>
  	@PythonName("list_attr_2")
  	static attr listAttr2: List<union<AttributesClassA, String>>
  	// TODO List type has to many type arguments.
  	@PythonName("list_attr_3")
  	static attr listAttr3: List<String, AttributesClassA>
  	// TODO List type has to many type arguments.
  	@PythonName("list_attr_4")
  	static attr listAttr4: List<String, union<AttributesClassA, Int>>
  	@PythonName("set_attr_1")
  	static attr setAttr1: Set<Any>
  	@PythonName("set_attr_2")
  	static attr setAttr2: Set<union<AttributesClassA, String>>
  	// TODO Set type has to many type arguments.
  	@PythonName("set_attr_3")
  	static attr setAttr3: Set<String, AttributesClassA>
  	// TODO Set type has to many type arguments.
  	@PythonName("set_attr_4")
  	static attr setAttr4: Set<String, union<AttributesClassA, Int>>
  	@PythonName("dict_attr_1")
  	static attr dictAttr1: Map<Any, Any>
  	@PythonName("dict_attr_2")
  	static attr dictAttr2: Map<String, Int>
  	@PythonName("dict_attr_3")
  	static attr dictAttr3: Map<union<Int, String>, AttributesClassA?>
  	@PythonName("bool_attr")
  	static attr boolAttr: Boolean
  	@PythonName("none_attr")
  	static attr noneAttr: Nothing?
  	@PythonName("flaot_attr")
  	static attr flaotAttr: Float
  	@PythonName("int_or_bool_attr")
  	static attr intOrBoolAttr: union<Boolean, Int>
  	@PythonName("str_attr_with_none_value")
  	static attr strAttrWithNoneValue: String
  	static attr optional: Int?
  	static attr final: String
  	static attr finals: union<Int, String>
  	@PythonName("final_union")
  	static attr finalUnion: union<Int, String>
  	static attr `literal`: literal<"Some String">
  	@PythonName("multiple_literals")
  	static attr multipleLiterals: literal<"Literal_1", "Literal_2", 3, True>
  	@PythonName("mixed_literal_union")
  	static attr mixedLiteralUnion: union<Int, String, literal<"L1", 2, 4, False>>
  	@PythonName("multi_attr_1")
  	static attr multiAttr1: Int
  	@PythonName("multi_attr_3")
  	static attr multiAttr3: List<String>
  	@PythonName("multi_attr_5")
  	static attr multiAttr5: String
  	@PythonName("multi_attr_6")
  	static attr multiAttr6: String
  	@PythonName("multi_attr_7")
  	static attr multiAttr7: String
  	@PythonName("multi_attr_8")
  	static attr multiAttr8: String
  	@PythonName("attr_type_from_outside_package")
  	static attr attrTypeFromOutsidePackage: AnotherClass
  	@PythonName("attr_default_value_from_outside_package")
  	static attr attrDefaultValueFromOutsidePackage: () -> a: AnotherClass
  	@PythonName("init_attr")
  	attr initAttr: Boolean
  
  	@Pure
  	@PythonName("some_func")
  	static fun someFunc() -> result1: Boolean
  }
  
  '''
# ---
# name: test_class_creation
  '''
  @PythonModule("various_modules_package.class_module")
  package variousModulesPackage.classModule
  
  class ClassModuleEmptyClassA()
  
  class ClassModuleClassB(
  	a: Int,
  	b: ClassModuleEmptyClassA?
  ) sub ClassModuleEmptyClassA {
  	// TODO Result type information missing.
  	@Pure
  	fun f()
  }
  
  // TODO Safe-DS does not support multiple inheritance.
  class ClassModuleClassC() sub ClassModuleEmptyClassA, ClassModuleClassB {
  	@PythonName("attr_1")
  	static attr attr1: Int
  	@PythonName("attr_2")
  	static attr attr2: Int
  
  	// TODO Result type information missing.
  	@Pure
  	fun f1()
  }
  
  class ClassModuleClassD() {
  	class ClassModuleNestedClassE() {
  		@PythonName("nested_attr_1")
  		static attr nestedAttr1: Nothing?
  
  		@PythonName("_ClassModulePrivateDoubleNestedClassF")
  		class ClassModulePrivateDoubleNestedClassF()
  
  		// TODO Result type information missing.
  		@Pure
  		@PythonName("class_e_func")
  		fun classEFunc()
  	}
  }
  
  '''
# ---
# name: test_enum_creation
  '''
  @PythonModule("various_modules_package.enum_module")
  package variousModulesPackage.enumModule
  
  enum _ReexportedEmptyEnum
  
  enum EnumTest {
  	ONE
  	TWO
  	THREE
  	FOUR
  	FIVE
  	SIX
  	SEVEN
  	EIGHT
  	NINE
  }
  
  enum EnumTest2 {
  	TEN
  }
  
  enum EnumTest3 {
  	@PythonName("ele_ven") eleVen
  }
  
  enum EmptyEnum
  
  '''
# ---
# name: test_function_creation
  '''
  @PythonModule("various_modules_package.function_module")
  package variousModulesPackage.functionModule
  
  from tests.data.main_package.another_path.another_module import AnotherClass
  
  // TODO Result type information missing.
  @Pure
  @PythonName("public_no_params_no_result")
  fun publicNoParamsNoResult()
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support tuple types.
  // TODO Some parameter have no type information.
  @Pure
  fun params(
  	integer: Int,
  	boolean: Boolean,
  	@PythonName("float_") float: Float,
  	none: Nothing?,
  	string: String,
  	obj: FunctionModuleClassA,
  	callexpr,
  	`union`: union<Boolean, Int>,
  	@PythonName("union_with_none_1") unionWithNone1: Int?,
  	@PythonName("union_with_none_2") unionWithNone2: Int?,
  	@PythonName("list_") list: List<Int>,
  	dictionary: Map<String, union<Float, Int>>,
  	@PythonName("set_") set: Set<String>,
  	optional: Int?,
  	@PythonName("tuple_") tuple: Tuple<Int, String, Boolean>,
  	`literal`: literal<"Some String">,
  	@PythonName("any_") any: Any
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support tuple types.
  // TODO Some parameter have no type information.
  @Pure
  @PythonName("params_with_default_value")
  fun paramsWithDefaultValue(
  	integer: Int = 3,
  	boolean: Boolean = true,
  	@PythonName("float_") float: Float = 1.2,
  	none: Nothing? = null,
  	string: String = "Some String",
  	obj: FunctionModuleClassA,
  	callexpr,
  	`union`: union<Boolean, Int> = 2,
  	@PythonName("union_with_none_1") unionWithNone1: Int? = 2,
  	@PythonName("union_with_none_2") unionWithNone2: Int? = 3,
  	@PythonName("list_") list: List<Int>,
  	dictionary: Map<String, union<Float, Int>>,
  	@PythonName("set_") set: Set<String>,
  	optional: Int? = null,
  	@PythonName("tuple_") tuple: Tuple<Int, String, Boolean>,
  	`literal`: literal<"Some String"> = "Some String",
  	@PythonName("any_") any: Any = false
  )
  
  // TODO List type has to many type arguments.
  // TODO Result type information missing.
  // TODO Safe-DS does not support tuple types.
  @Pure
  @PythonName("illegal_params")
  fun illegalParams(
  	lst: List<Int, String>,
  	@PythonName("lst_2") lst2: List<Int, String, Int>,
  	tpl: Tuple<Int, String, Boolean, Int>,
  	dct: Map<Any, Any>,
  	`_`: Int = String
  )
  
  // TODO Result type information missing.
  @Pure
  @PythonName("special_params")
  fun specialParams(
  	@PythonName("none_union") noneUnion: Nothing?,
  	@PythonName("none_bool_union") noneBoolUnion: Boolean?,
  	@PythonName("bool_none_union") boolNoneUnion: Boolean?,
  	@PythonName("none_bool_none_union") noneBoolNoneUnion: Boolean?,
  	@PythonName("none_bool_int_union") noneBoolIntUnion: union<Boolean, Int, Nothing?>,
  	@PythonName("none_none_bool_none_union") noneNoneBoolNoneUnion: Boolean?,
  	@PythonName("none_list_union_none_none") noneListUnionNoneNone: List<Nothing?>?,
  	none: Nothing?
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support required but name only parameter assignments.
  // TODO Some parameter have no type information.
  @Pure
  @PythonName("param_position")
  fun paramPosition(
  	self,
  	a,
  	b: Boolean,
  	c,
  	d,
  	e: Int = 1
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support optional but position only parameter assignments.
  // TODO Some parameter have no type information.
  @Pure
  @PythonName("opt_pos_only")
  fun optPosOnly(
  	required,
  	optional: Int = 1
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support required but name only parameter assignments.
  // TODO Some parameter have no type information.
  @Pure
  @PythonName("req_name_only")
  fun reqNameOnly(
  	required,
  	optional: Int = 1
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support variadic parameters.
  // TODO Some parameter have no type information.
  @Pure
  fun arg(
  	args: List<Any>,
  	kwargs: Map<String, Any>
  )
  
  // TODO Result type information missing.
  // TODO Safe-DS does not support variadic parameters.
  @Pure
  @PythonName("args_type")
  fun argsType(
  	args: List<Int>,
  	kwargs: Map<String, Int>
  )
  
  @Pure
  @PythonName("int_result")
  fun intResult() -> result1: Int
  
  @Pure
  @PythonName("str_result")
  fun strResult() -> result1: String
  
  @Pure
  @PythonName("bool_result")
  fun boolResult() -> result1: Boolean
  
  @Pure
  @PythonName("float_result")
  fun floatResult() -> result1: Float
  
  // TODO Result type information missing.
  @Pure
  @PythonName("none_result")
  fun noneResult()
  
  @Pure
  @PythonName("obj_result")
  fun objResult() -> result1: FunctionModuleClassA
  
  // TODO Result type information missing.
  @Pure
  @PythonName("callexr_result_class")
  fun callexrResultClass()
  
  // TODO Result type information missing.
  @Pure
  @PythonName("callexr_result_function")
  fun callexrResultFunction()
  
  @Pure
  @PythonName("tuple_results")
  fun tupleResults() -> (result1: String, result2: FunctionModuleClassA)
  
  @Pure
  @PythonName("union_results")
  fun unionResults() -> result1: union<Int, String>
  
  @Pure
  @PythonName("list_results")
  fun listResults() -> result1: List<Int>
  
  // TODO List type has to many type arguments.
  @Pure
  @PythonName("illegal_list_results")
  fun illegalListResults() -> result1: List<Int, String>
  
  @Pure
  @PythonName("dictionary_results")
  fun dictionaryResults() -> result1: Map<String, FunctionModuleClassA>
  
  @Pure
  @PythonName("dictionary_results_no_key_no_value")
  fun dictionaryResultsNoKeyNoValue() -> result1: Map<Any, Any>
  
  @Pure
  @PythonName("illegal_dictionary_results")
  fun illegalDictionaryResults() -> result1: Map<Any, Any>
  
  @Pure
  @PythonName("union_dictionary_results")
  fun unionDictionaryResults() -> result1: Map<union<Int, String>, union<Boolean, Float>>
  
  @Pure
  @PythonName("set_results")
  fun setResults() -> result1: Set<String>
  
  // TODO Set type has to many type arguments.
  @Pure
  @PythonName("illegal_set_results")
  fun illegalSetResults() -> result1: Set<String, Boolean>
  
  @Pure
  @PythonName("optional_results")
  fun optionalResults() -> result1: Int?
  
  @Pure
  @PythonName("literal_results")
  fun literalResults() -> result1: literal<"Some String">
  
  @Pure
  @PythonName("any_results")
  fun anyResults() -> result1: Any
  
  @Pure
  @PythonName("callable_type")
  fun callableType(
  	param: (a: String) -> (b: Int, c: String)
  ) -> result1: (a: Int, b: Int) -> c: Int
  
  // TODO Result type information missing.
  // TODO Some parameter have no type information.
  @Pure
  @PythonName("param_from_outside_the_package")
  fun paramFromOutsideThePackage(
  	@PythonName("param_type") paramType: AnotherClass,
  	@PythonName("param_value") paramValue
  )
  
  @Pure
  @PythonName("result_from_outside_the_package")
  fun resultFromOutsideThePackage() -> result1: AnotherClass
  
  class FunctionModuleClassA()
  
  // TODO Some parameter have no type information.
  class FunctionModuleClassB(
  	@PythonName("init_param") initParam
  ) {
  	class FunctionModuleClassC() {
  		class FunctionModuleClassD()
  
  		@Pure
  		@PythonName("nested_class_function")
  		fun nestedClassFunction(
  			param1: Int
  		) -> result1: Boolean
  	}
  
  	@Pure
  	@PythonName("instance_method")
  	fun instanceMethod(
  		a: FunctionModuleClassA
  	) -> result1: FunctionModuleClassA
  
  	// TODO Result type information missing.
  	@Pure
  	@PythonName("static_method")
  	static fun staticMethod()
  
  	// TODO Result type information missing.
  	@Pure
  	@PythonName("static_method_params")
  	static fun staticMethodParams(
  		@PythonName("param_1") param1: Int
  	)
  
  	// TODO Result type information missing.
  	// TODO Safe-DS does not support class methods.
  	@Pure
  	@PythonName("class_method")
  	static fun classMethod()
  
  	// TODO Safe-DS does not support class methods.
  	@Pure
  	@PythonName("class_method_params")
  	static fun classMethodParams(
  		@PythonName("param_1") param1: Int
  	) -> result1: Boolean
  }
  
  class FunctionModulePropertiesClass() {
  	@PythonName("property_function") attr propertyFunction
  	@PythonName("property_function_params") attr propertyFunctionParams: String
  	@PythonName("property_function_infer") attr propertyFunctionInfer: String
  }
  
  '''
# ---
# name: test_import_creation
  '''
  @PythonModule("various_modules_package.import_module")
  package variousModulesPackage.importModule
  
  from class_module import ClassModuleClassD
  from class_module import ClassModuleEmptyClassA
  from class_module import ClassModuleClassB
  from class_module import ClassModuleClassC
  
  class ImportClass() sub AnotherClass {
  	@PythonName("typed_import_attr")
  	static attr typedImportAttr: ClassModuleClassD
  	@PythonName("default_import_attr")
  	static attr defaultImportAttr: ClassModuleEmptyClassA
  
  	@Pure
  	@PythonName("import_function")
  	fun importFunction(
  		@PythonName("import_param") importParam: ClassModuleClassB
  	) -> result1: ClassModuleClassC
  }
  
  '''
# ---
# name: test_type_inference
  '''
  @PythonModule("various_modules_package.infer_types_module")
  package variousModulesPackage.inferTypesModule
  
  class InferMe()
  
  class InferMe2()
  
  class InferMe3()
  
  class InferMyTypes(
  	@PythonName("init_param") initParam: Int = 1
  ) {
  	@PythonName("infer_int")
  	static attr inferInt: Int
  	@PythonName("infer_float")
  	static attr inferFloat: Float
  	@PythonName("infer_bool")
  	static attr inferBool: Boolean
  	@PythonName("infer_str")
  	static attr inferStr: String
  	@PythonName("infer_none")
  	static attr inferNone: Nothing?
  	@PythonName("infer_obj")
  	static attr inferObj: () -> a: InferMe
  	// TODO Attribute has no type information.
  	@PythonName("init_infer")
  	attr initInfer
  
  	// TODO Result type information missing.
  	// TODO Some parameter have no type information.
  	@Pure
  	@PythonName("infer_param_types")
  	static fun inferParamTypes(
  		integer: Int = 3,
  		boolean: Boolean = true,
  		@PythonName("float_") float: Float = 1.2,
  		none: Nothing? = null,
  		string: String = "Some String",
  		callexpr,
  		@PythonName("int_list") intList,
  		dictionary,
  		@PythonName("string_set") stringSet,
  		@PythonName("tuple_") tuple
  	)
  
  	@Pure
  	@PythonName("infer_function")
  	static fun inferFunction(
  		@PythonName("infer_param") inferParam: Int = 1,
  		@PythonName("infer_param_2") inferParam2: Int = Something
  	) -> (result1: union<Boolean, Float, InferMe, InferMe2, InferMe3, InferMyTypes, Int, Nothing?, String>, result2: union<Float, Int>, result3: Float)
  
  	@Pure
  	@PythonName("infer_function_2")
  	static fun inferFunction2(
  		i: Int = 2
  	) -> result1: union<Boolean, String>
  }
  
  '''
# ---
# name: test_variance_creation
  '''
  @PythonModule("various_modules_package.variance_module")
  package variousModulesPackage.varianceModule
  
  class A()
  
  class VarianceClassAll<out TCo, in TCon, TIn>() where {
  	TCo sub String,
  	TCon super A
  }
  
  class VarianceClassOnlyInvariance<TIn>()
  
  '''
# ---
