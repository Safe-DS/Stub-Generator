# serializer version: 1
# name: test_class_attribute_creation
  '''
  package test_stub_generation.attribute_module
  
  class A()
  
  class B() {
  	static attr type_hint_public: Int
  	static attr no_type_hint_public
  	static attr object_attr: A
  	// TODO Safe-DS does not support tuple types.
  	static attr tuple_attr_1: Tuple
  	// TODO Safe-DS does not support tuple types.
  	static attr tuple_attr_2: Tuple<union<String, Int>>
  	// TODO Safe-DS does not support tuple types.
  	static attr tuple_attr_3: Tuple<String, Int>
  	static attr list_attr_1: List<Any>
  	static attr list_attr_2: List<union<String, A>>
  	// TODO List type has to many type arguments.
  	static attr list_attr_3: List<String, A>
  	// TODO List type has to many type arguments.
  	static attr list_attr_4: List<String, union<A, Int>>
  	static attr dict_attr_1: Map<Any, Any>
  	static attr dict_attr_2: Map<String, Int>
  	static attr dict_attr_3: Map<union<String, Int>, A?>
  	static attr bool_attr: Boolean
  	static attr none_attr: Nothing?
  	static attr flaot_attr: Float
  	static attr int_or_bool_attr: union<Int, Boolean>
  	static attr str_attr_with_none_value: String
  	static attr mulit_attr_1
  	static attr mulit_attr_3
  	static attr mulit_attr_5
  	static attr mulit_attr_6
  	static attr mulit_attr_7
  	static attr mulit_attr_8
  	attr init_attr: Boolean
  }
  
  '''
# ---
# name: test_class_creation
  '''
  package test_stub_generation.class_module
  
  class A()
  
  class B(a: Int, b: A?) sub A {
  	fun f()
  }
  
  // TODO Safe-DS does not support multiple inheritance.
  class C() sub A, B {
  	static attr attr_1: Int
  	static attr attr_2: Int
  
  	fun f1()
  }
  
  class D() {
  	class E() {
  		class F()
  	}
  }
  
  '''
# ---
# name: test_enum_creation
  '''
  package test_stub_generation.enum_module
  
  from `enum` import Enum
  from `enum` import IntEnum
  from `enum` import Enum as _Enum
  
  enum EnumTest {
  	ONE
  	TWO
  	THREE
  	FOUR
  	FIVE
  	SIX
  	SEVEN
  	EIGHT
  	NINE
  }
  
  enum EnumTest2 {
  	TEN
  }
  
  enum EnumTest3 {
  	ELEVEN
  }
  
  enum EmptyEnum
  
  '''
# ---
# name: test_function_creation
  '''
  package test_stub_generation.function_module
  
  fun public_no_params_no_result()
  
  fun params(i: Int, union: union<Int, Boolean>, lst: List<Int>, obj: A) -> result_1: Any
  
  // TODO Safe-DS does not support tuple types.
  fun illegal_params(none: Nothing?, none_union: Nothing??, tpl: Tuple<Int, String, Boolean, Int>, lst: List<Any>, _: Int = String) -> result_1: Any
  
  fun special_params(none_union: Boolean?) -> result_1: Any
  
  fun param_position(self: Any, a: Any, b: Boolean, c: Any = 1, d: Any, e: Int = 1) -> result_1: Any
  
  // TODO Safe-DS does not support optional but position only parameter assignments.
  fun opt_pos_only(required: Any, optional: Any = 1)
  
  // TODO Safe-DS does not support required but name only parameter assignments.
  fun req_name_only(required: Any, optional: Any = 1)
  
  // TODO Safe-DS does not support tuple types.
  fun arg(args: Tuple, kwargs: Map<String, Any>)
  
  // TODO Safe-DS does not support tuple types.
  fun args_type(args: Tuple, kwargs: Map<String, Int>) -> result_1: Any
  
  fun one_result() -> result_1: Int
  
  fun multiple_results() -> (result_1: String, result_2: Int, result_3: Boolean, result_4: A)
  
  class A()
  
  class B(init_param: Any) {
  	fun instance_method(a: A) -> result_1: A
  
  	static fun static_class_method()
  
  	fun class_method()
  }
  
  '''
# ---
# name: test_import_creation
  '''
  package test_stub_generation.import_module
  
  from `enum` import IntEnum
  from `enum` import Enum as _Enum
  import mypy as static
  
  from math import *
  
  '''
# ---
