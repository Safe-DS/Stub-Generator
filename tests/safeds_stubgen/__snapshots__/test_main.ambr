# serializer version: 1
# name: test_main[googledoc - boundary - enum]
  dict({
    'attributes': list([
      dict({
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/attribute1',
        'is_public': True,
        'is_static': False,
        'name': 'attribute1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/attribute2',
        'is_public': True,
        'is_static': False,
        'name': 'attribute2',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
    ]),
    'classes': list([
      dict({
        'attributes': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/attribute1',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/attribute2',
        ]),
        'classes': list([
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '',
            'examples': list([
            ]),
            'full_docstring': '''
              Attributes:
                  attribute1 (float):
                      Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                      to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                      updating these values (messages).
                  attribute2 (str):
                      If "mean", then replace missing values using the mean along each column. 
                      If "median", then replace missing values using the median along each column. 
                      If "most_frequent", then replace missing using the most frequent value along each column. 
                      If "constant", then replace missing values with fill_value.
            ''',
          }),
          'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': True,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/__init__/self',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
            
            Attributes:
                attribute1 (float):
                    Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                    to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                    updating these values (messages).
                attribute2 (str):
                    If "mean", then replace missing values using the mean along each column. 
                    If "median", then replace missing values using the median along each column. 
                    If "most_frequent", then replace missing using the most frequent value along each column. 
                    If "constant", then replace missing values with fill_value.
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
        ]),
        'name': 'ClassWithAttributes',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '''
            Attributes:
                attribute1 (float):
                    Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                    to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                    updating these values (messages).
                attribute2 (str):
                    If "mean", then replace missing values using the mean along each column. 
                    If "median", then replace missing values using the median along each column. 
                    If "most_frequent", then replace missing using the most frequent value along each column. 
                    If "constant", then replace missing values with fill_value.
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/__init__/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            Args:
                param1 (str): If "mean", then replace missing values using the mean along each column. 
                    If "median", then replace missing values using the median along each column. 
                    If "most_frequent", then replace missing using the most frequent value along each column. 
                    If "constant", then replace missing values with fill_value.
                param2 (str or bool): Valid values are [False, None, 'sparse matrix']
                param3 (float): Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                    to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                    updating these values (messages).
                param4 (int or float): If bootstrap is True, the number of samples to draw from X to train each base estimator.
                    If None (default), then draw X.shape[0] samples.
                    If int, then max_samples values in [0, 10].
                    If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_google',
        'parameters': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param1',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param2',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param3',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_googledoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes',
        ]),
        'docstring': 'GoogleDoc Docstring of the main_module_googledoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google',
        ]),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc',
        'name': 'main_module_googledoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_googledoc',
    'parameters': list([
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/ClassWithAttributes/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
            ]),
          }),
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            If bootstrap is True, the number of samples to draw from X to train each base estimator.
            If None (default), then draw X.shape[0] samples.
            If int, then max_samples values in [0, 10].
            If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
            ]),
          }),
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_googledoc.main_module_googledoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[numpydoc - boundary - enum]
  dict({
    'attributes': list([
      dict({
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/attribute1',
        'is_public': True,
        'is_static': False,
        'name': 'attribute1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/attribute2',
        'is_public': True,
        'is_static': False,
        'name': 'attribute2',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
    ]),
    'classes': list([
      dict({
        'attributes': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/attribute1',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/attribute2',
        ]),
        'classes': list([
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '',
            'examples': list([
            ]),
            'full_docstring': '''
              Attributes
              ----------
              attribute1 : float
                  Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                  to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                  updating these values (messages).
              attribute2 : str
                  If "mean", then replace missing values using the mean along each column. 
                  If "median", then replace missing values using the median along each column. 
                  If "most_frequent", then replace missing using the most frequent value along each column. 
                  If "constant", then replace missing values with fill_value.
            ''',
          }),
          'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': True,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/__init__/self',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
            
            Attributes
            ----------
            attribute1 : float
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            attribute2 : str
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
        ]),
        'name': 'ClassWithAttributes',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '''
            Attributes
            ----------
            attribute1 : float
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            attribute2 : str
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/__init__/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            Parameters
            --------
            param1 : str
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            
            param2 : str or bool
                Valid values are [False, None, 'sparse matrix']
            
            param3 : float
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            
            param4 : int or float
                If bootstrap is True, the number of samples to draw from X to train each base estimator.
                If None (default), then draw X.shape[0] samples.
                If int, then max_samples values in [0, 10].
                If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_numpy',
        'parameters': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param1',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param2',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param3',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_numpydoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes',
        ]),
        'docstring': 'NumpyDoc Docstring of the main_module_numpydoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy',
        ]),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc',
        'name': 'main_module_numpydoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_numpydoc',
    'parameters': list([
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/ClassWithAttributes/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
            ]),
          }),
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            If bootstrap is True, the number of samples to draw from X to train each base estimator.
            If None (default), then draw X.shape[0] samples.
            If int, then max_samples values in [0, 10].
            If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
            ]),
          }),
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_numpydoc.main_module_numpydoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[plaintext]
  dict({
    'attributes': list([
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_init_attr_private',
        'is_public': False,
        'is_static': False,
        'name': '_init_attr_private',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/attr_1',
        'is_public': True,
        'is_static': True,
        'name': 'attr_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/init_attr',
        'is_public': True,
        'is_static': False,
        'name': 'init_attr',
        'type': dict({
          'kind': 'NamedType',
          'name': 'bool',
          'qname': 'builtins.bool',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/nested_class_attr',
        'is_public': False,
        'is_static': True,
        'name': 'nested_class_attr',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_attr_in_private_class',
        'is_public': False,
        'is_static': True,
        'name': 'public_attr_in_private_class',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_init_attr_in_private_class',
        'is_public': False,
        'is_static': False,
        'name': 'public_init_attr_in_private_class',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
    ]),
    'classes': list([
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/AnotherClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
        ]),
        'name': 'AnotherClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function',
        ]),
        'name': 'yetAnotherClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/ModuleClass/attr_1',
          'tests/data/main_package/main_module/ModuleClass/init_attr',
          'tests/data/main_package/main_module/ModuleClass/_init_attr_private',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass',
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '''
              Summary of the init description.
              
              Full init description.
            ''',
            'examples': list([
            ]),
            'full_docstring': '''
              Summary of the init description.
              
              Full init description.
            ''',
          }),
          'id': 'tests/data/main_package/main_module/ModuleClass/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': True,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/main_package/main_module/ModuleClass/__init__/self',
            'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '''
            Summary of the description.
            
            Full description
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Summary of the description.
            
            Full description
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function',
        ]),
        'name': 'ModuleClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
          'tests.data.main_package.another_path.another_module.AnotherClass',
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function',
        ]),
        'name': 'NestedClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
          'another_path.another_module.AnotherClass',
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/_PrivateClass/public_attr_in_private_class',
          'tests/data/main_package/main_module/_PrivateClass/public_init_attr_in_private_class',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass',
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '',
            'examples': list([
            ]),
            'full_docstring': '',
          }),
          'id': 'tests/data/main_package/main_module/_PrivateClass/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': False,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/main_package/main_module/_PrivateClass/__init__/self',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
          'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class',
        ]),
        'name': '_PrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/nested_class_attr',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/NestedNestedPrivateClass',
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/static_nested_private_class_function',
        ]),
        'name': 'NestedPrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/NestedNestedPrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
        ]),
        'name': 'NestedNestedPrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'another_function',
        'parameters': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'nested_class_function',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/self',
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/param_1',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Summary of the init description.
            
            Full init description.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Summary of the init description.
            
            Full init description.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/__init__/self',
          'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Function Docstring.
            
            Parameters
            ---------
            param_2 : bool, optional.
                Valid values are True and False.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Function Docstring.
            
            Parameters
            ---------
            param_2 : bool, optional.
                Valid values are True and False.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '_some_function',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function/self',
          'tests/data/main_package/main_module/ModuleClass/_some_function/param_1',
          'tests/data/main_package/main_module/ModuleClass/_some_function/param_2',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/static_nested_private_class_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': True,
        'name': 'static_nested_private_class_function',
        'parameters': list([
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/main_package/main_module/_PrivateClass/__init__/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': 'public_func_in_private_class',
        'parameters': list([
          'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_private_global_func',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '_private_global_func',
        'parameters': list([
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/_private_global_func/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Docstring 1.
            
            Docstring 2.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Docstring 1.
            
            Docstring 2.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/global_func',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func',
        'parameters': list([
          'tests/data/main_package/main_module/global_func/main_test_param_1',
          'tests/data/main_package/main_module/global_func/main_test_param_2',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/global_func/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package/another_path',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/main_package/another_path/another_module/AnotherClass',
          'tests/data/main_package/another_path/another_module/yetAnotherClass',
        ]),
        'docstring': '''
          Another Module Docstring.
          
          Full Docstring Description
  
        ''',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package/another_path/another_module',
        'name': 'another_module',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/main_package/main_module/ModuleClass',
          'tests/data/main_package/main_module/_PrivateClass',
        ]),
        'docstring': 'Docstring of the some_class.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/main_package/main_module/global_func',
          'tests/data/main_package/main_module/_private_global_func',
        ]),
        'id': 'tests/data/main_package/main_module',
        'name': 'main_module',
        'qualified_imports': list([
          dict({
            'alias': 'mathematics',
            'qualified_name': 'math',
          }),
          dict({
            'alias': None,
            'qualified_name': 'mypy',
          }),
          dict({
            'alias': None,
            'qualified_name': 'another_path.another_module.AnotherClass',
          }),
          dict({
            'alias': '_AcImportAlias',
            'qualified_name': 'another_path.another_module.AnotherClass',
          }),
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'main_package',
    'parameters': list([
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/param_1',
        'is_optional': False,
        'name': 'param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
        'is_optional': False,
        'name': 'init_param_1',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/param_1',
        'is_optional': False,
        'name': 'param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': False,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/param_2',
        'is_optional': True,
        'name': 'param_2',
        'type': dict({
          'kind': 'NamedType',
          'name': 'bool',
          'qname': 'builtins.bool',
        }),
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '"first param"',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/global_func/main_test_param_1',
        'is_optional': True,
        'name': 'main_test_param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/global_func/main_test_param_2',
        'is_optional': True,
        'name': 'main_test_param_2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'None',
              'qname': 'builtins.None',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'SetType',
          'types': list([
            dict({
              'kind': 'UnionType',
              'types': list([
                dict({
                  'kind': 'NamedType',
                  'name': 'bool',
                  'qname': 'builtins.bool',
                }),
                dict({
                  'kind': 'NamedType',
                  'name': 'None',
                  'qname': 'builtins.None',
                }),
              ]),
            }),
          ]),
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/_private_global_func/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
          ]),
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/global_func/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[purity]
  dict({
    'purity_package.__init__': dict({
    }),
    'purity_package.another_purity_path.__init__': dict({
    }),
    'purity_package.another_purity_path.another_purity_module': dict({
      'purity_package.another_purity_path.another_purity_module.ClassWithNestedClassAsMember.145.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__add__.54.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__add__.78.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__enter__.209.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'FileWrite': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.__exit__.213.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'FileWrite': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.135.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.146.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.182.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.189.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.193.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.197.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.201.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.205.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.__init__.8.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.double_function_impure.169.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.double_function_pure.166.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.116.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.51.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.75.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.90.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.113.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.48.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.72.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.87.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.24.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.45.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.69.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_impure.122.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_impure.30.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_impure.96.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_pure.119.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_pure.27.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_of_child_pure.93.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.21.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.42.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.66.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_T.39.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_T.63.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child.110.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child.84.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child_self.125.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child_self.99.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_impure.18.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_nested_call_impure.142.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_nested_call_pure.139.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_pure.15.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.recursive_function.163.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.return_class_impure.157.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.return_class_pure.160.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.11.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.185.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.36.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.60.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.super_impure.172.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'UnknownCall': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.super_pure.176.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'UnknownCall': 1,
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.super_same_name.103.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.super_same_name.129.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
    }),
    'purity_package.main_purity_module': dict({
      'purity_package.main_purity_module.closure.747.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.closure.756.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.closure.762.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_all_functions_pure.133.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_call_another_global_func_impure.770.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_call_another_global_func_pure.767.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_call_ref_in_dict_generation_impure.783.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_call_ref_in_dict_generation_should_be_pure_but_impure.776.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_call_reference_in_index_impure.581.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_call_reference_in_index_pure.575.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_closure_impure.761.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_closure_pure.746.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_closure_should_be_pure_but_impure.751.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_generator_impure.667.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_generator_pure.662.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_iterable_is_call_ref_impure.687.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_iterable_is_call_ref_pure.682.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_with_if_generator_impure.677.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_dict_comprehension_with_if_generator_pure.672.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_double_function_impure.304.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_double_function_impure2.312.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_find_deeply_nested_function_impure.148.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_dict_same_name_impure.512.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_dict_same_name_pure.501.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_dict_with_union_same_name_impure.534.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_dict_with_union_same_name_pure.523.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_list_same_name_impure.424.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_list_same_name_pure.412.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_multiple_tuple_same_name_impure.490.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_multiple_tuple_same_name_pure.479.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_tuple_same_name_impure.446.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_as_tuple_same_name_pure.435.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_docstring_same_name_impure.401.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_same_name_pure.390.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_parameter_as_multiple_tuple_same_name_impure.468.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_as_multiple_tuple_same_name_pure.457.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_impure.186.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_nested_impure.198.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 2,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_nested_pure_but_impure.190.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_pure.182.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_import_global_func_impure.793.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_T_impure.103.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 3,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_T_pure.93.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_child_of_child_impure.114.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_child_of_child_pure.109.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_T_impure.88.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_T_pure.83.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_super_impure.74.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_of_child_from_T_impure.124.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_of_child_from_T_pure.119.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_init_import_impure.790.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_init_import_pure.787.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_inside_of_lambda_with_map_impure.826.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_inside_of_lambda_with_map_should_be_pure_but_impure.818.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_isinstance_check_impure.738.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_isinstance_check_should_be_pure_but_impure.730.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_generator_impure.637.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_generator_pure.632.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_iterable_is_call_ref_impure.657.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_iterable_is_call_ref_pure.652.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_with_if_generator_impure.647.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_list_comprehension_with_if_generator_pure.642.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_module_class_with_static_method_impure.799.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_module_class_with_static_method_pure.796.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_multiple_nested_member_impure.249.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 3,
        }),
      }),
      'purity_package.main_purity_module.global_func_multiple_nested_member_should_be_pure_but_impure.240.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 2,
        }),
      }),
      'purity_package.main_purity_module.global_func_multiple_nested_methods_impure.259.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_multiple_nested_methods_pure.254.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_multiple_recursion_impure.290.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_multiple_recursion_impure2.299.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 2,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_class_impure.177.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 2,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_class_should_be_pure_but_impure.168.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_from_second_call_reference_impure.207.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_from_second_call_reference_pure.202.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_nested_member_from_super_impure.277.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_member_from_super_impure2.285.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 2,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_method_from_super_impure.272.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_method_from_super_pure.264.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_nested_with_dict_impure.235.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'NonLocalVariableWrite': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_with_dict_should_be_pure_but_impure.226.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableWrite': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_with_list_impure.221.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'NonLocalVariableWrite': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_nested_with_list_should_be_pure_but_impure.212.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableWrite': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_Child_impure.49.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_Child_pure.44.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_T_from_Child_impure.39.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_T_from_Child_pure.34.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_T_impure.29.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_T_pure.20.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_T_impure.59.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_T_pure.54.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_child_impure.69.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_child_pure.64.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_operator_expression_should_be_pure_but_impure.722.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_operator_receiver_with_brackets_impure.841.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_operator_receiver_with_brackets_should_be_pure_but_impure.831.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_return_impure_class.327.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_return_pure_class.320.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_same_name_impure.15.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_same_name_pure.10.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_self_impure.592.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_self_pure.587.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_generator_impure.697.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_generator_pure.692.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_iterable_is_call_ref_impure.717.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_iterable_is_call_ref_pure.712.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_with_if_generator_impure.707.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_set_comprehension_with_if_generator_pure.702.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_dict_impure.359.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_dict_pure.354.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_function_impure.330.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_function_pure.323.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_list_impure.339.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_list_pure.334.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_nested_type_and_function_impure.386.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_nested_type_and_function_pure.379.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_nested_type_impure.371.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_nested_type_pure.366.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_start_with_tuple_impure.349.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_start_with_tuple_pure.344.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_super_from_builtin_keyError_pure.628.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_super_init_impure.601.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_super_init_pure.597.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_super_method_impure.610.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_super_method_pure.605.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_super_nested_method_impure.623.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_super_nested_method_should_be_pure_but_impure.615.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
          'UnknownCall': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_union_type_from_docstring_impure.564.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_union_type_from_docstring_pure.553.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_union_type_impure.549.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_union_type_pure.545.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_unreachable_code_impure.810.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_unreachable_code_should_be_pure_but_impure.802.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_with_keyword_impure.855.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_func_with_keyword_should_be_pure_but_impure.847.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': 1,
        }),
      }),
      'purity_package.main_purity_module.global_helper_func_nested_type_impure_with_list_and_dict.383.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_helper_func_nested_type_pure_with_list_and_dict.376.0': dict({
        'purity': 'Pure',
      }),
    }),
  })
# ---
# name: test_main[restdoc - boundary - enum]
  dict({
    'attributes': list([
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/attribute1',
        'is_public': True,
        'is_static': False,
        'name': 'attribute1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'docstring': dict({
          'boundaries': list([
          ]),
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/attribute2',
        'is_public': True,
        'is_static': False,
        'name': 'attribute2',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
    ]),
    'classes': list([
      dict({
        'attributes': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/attribute1',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/attribute2',
        ]),
        'classes': list([
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '',
            'examples': list([
            ]),
            'full_docstring': '''
              :param attribute1:
                  Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                  to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                  updating these values (messages).
              :type attribute1: float
              :param attribute2:
                  If "mean", then replace missing values using the mean along each column. 
                  If "median", then replace missing values using the median along each column. 
                  If "most_frequent", then replace missing using the most frequent value along each column. 
                  If "constant", then replace missing values with fill_value.
              :type attribute2: str
            ''',
          }),
          'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': True,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/__init__/self',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            ClassAndConstructorWithParameters
            
            Dolor sit amet.
            
            :param attribute1:
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            :type attribute1: float
            :param attribute2:
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            :type attribute2: str
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
        ]),
        'name': 'ClassWithAttributes',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '''
            :param attribute1:
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            :type attribute1: float
            :param attribute2:
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            :type attribute2: str
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/__init__/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            :param param1: 
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            :type param1: int
            :param param2: Valid values are [False, None, 'sparse matrix']
            :type param2: str or bool
            :param param3: 
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            :type param3: float
            :param param4:
                If bootstrap is True, the number of samples to draw from X to train each base estimator.
                If None (default), then draw X.shape[0] samples.
                If int, then max_samples values in [0, 10].
                If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
            :type param4: int or float
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_rest',
        'parameters': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param1',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param2',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param3',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_restdoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes',
        ]),
        'docstring': 'ReST Docstring of the main_module_restdoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest',
        ]),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc',
        'name': 'main_module_restdoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_restdoc',
    'parameters': list([
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': None,
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/ClassWithAttributes/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': 'If "mean", then replace missing values using the mean along each column.  If "median", then replace missing values using the median along each column.  If "most_frequent", then replace missing using the most frequent value along each column.  If "constant", then replace missing values with fill_value.',
          'type': dict({
            'kind': 'NamedType',
            'name': 'int',
            'qname': 'builtins.int',
          }),
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
            ]),
          }),
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': 'Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages).',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': 'If bootstrap is True, the number of samples to draw from X to train each base estimator. If None (default), then draw X.shape[0] samples. If int, then max_samples values in [0, 10]. If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
            ]),
          }),
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_restdoc.main_module_restdoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
