# serializer version: 1
# name: test_main[googledoc - boundary - enum]
  dict({
    'attributes': list([
    ]),
    'classes': list([
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            Args:
                param1 (str): If "mean", then replace missing values using the mean along each column. 
                    If "median", then replace missing values using the median along each column. 
                    If "most_frequent", then replace missing using the most frequent value along each column. 
                    If "constant", then replace missing values with fill_value.
                param2 (str or bool): Valid values are [False, None, 'sparse matrix']
                param3 (float): Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                    to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                    updating these values (messages).
                param4 (int or float): If bootstrap is True, the number of samples to draw from X to train each base estimator.
                    If None (default), then draw X.shape[0] samples.
                    If int, then max_samples values in [0, 10].
                    If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_google',
        'parameters': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param1',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param2',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param3',
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_googledoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
        ]),
        'docstring': 'GoogleDoc Docstring of the main_module_googledoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google',
        ]),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc',
        'name': 'main_module_googledoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_googledoc',
    'parameters': list([
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'type_string': 'str',
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
            ]),
          }),
          'type_string': 'str or bool',
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'type_string': 'float',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            If bootstrap is True, the number of samples to draw from X to train each base estimator.
            If None (default), then draw X.shape[0] samples.
            If int, then max_samples values in [0, 10].
            If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
            ]),
          }),
          'type_string': 'int or float',
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_googledoc/main_module_googledoc/global_func1_google/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_googledoc.main_module_googledoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[numpydoc - boundary - enum]
  dict({
    'attributes': list([
    ]),
    'classes': list([
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            Parameters
            --------
            param1 : str
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            
            param2 : str or bool
                Valid values are [False, None, 'sparse matrix']
            
            param3 : float
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            
            param4 : int or float
                If bootstrap is True, the number of samples to draw from X to train each base estimator.
                If None (default), then draw X.shape[0] samples.
                If int, then max_samples values in [0, 10].
                If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_numpy',
        'parameters': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param1',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param2',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param3',
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_numpydoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
        ]),
        'docstring': 'NumpyDoc Docstring of the main_module_numpydoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy',
        ]),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc',
        'name': 'main_module_numpydoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_numpydoc',
    'parameters': list([
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '''
            If "mean", then replace missing values using the mean along each column. 
            If "median", then replace missing values using the median along each column. 
            If "most_frequent", then replace missing using the most frequent value along each column. 
            If "constant", then replace missing values with fill_value.
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'str',
            'qname': 'builtins.str',
          }),
          'type_string': 'str',
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
            ]),
          }),
          'type_string': 'str or bool',
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
            to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
            updating these values (messages).
          ''',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'type_string': 'float',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': '''
            If bootstrap is True, the number of samples to draw from X to train each base estimator.
            If None (default), then draw X.shape[0] samples.
            If int, then max_samples values in [0, 10].
            If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
          ''',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
            ]),
          }),
          'type_string': 'int or float',
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_numpydoc/main_module_numpydoc/global_func1_numpy/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_numpydoc.main_module_numpydoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[plaintext]
  dict({
    'attributes': list([
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_init_attr_private',
        'is_public': False,
        'is_static': False,
        'name': '_init_attr_private',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/attr_1',
        'is_public': True,
        'is_static': True,
        'name': 'attr_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/init_attr',
        'is_public': True,
        'is_static': False,
        'name': 'init_attr',
        'type': dict({
          'kind': 'NamedType',
          'name': 'bool',
          'qname': 'builtins.bool',
        }),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/nested_class_attr',
        'is_public': False,
        'is_static': True,
        'name': 'nested_class_attr',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_attr_in_private_class',
        'is_public': False,
        'is_static': True,
        'name': 'public_attr_in_private_class',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'type': None,
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_init_attr_in_private_class',
        'is_public': False,
        'is_static': False,
        'name': 'public_init_attr_in_private_class',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
    ]),
    'classes': list([
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/AnotherClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
        ]),
        'name': 'AnotherClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function',
        ]),
        'name': 'yetAnotherClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/ModuleClass/attr_1',
          'tests/data/main_package/main_module/ModuleClass/init_attr',
          'tests/data/main_package/main_module/ModuleClass/_init_attr_private',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass',
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '''
              Summary of the init description.
              
              Full init description.
            ''',
            'examples': list([
            ]),
            'full_docstring': '''
              Summary of the init description.
              
              Full init description.
            ''',
          }),
          'id': 'tests/data/main_package/main_module/ModuleClass/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': True,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/main_package/main_module/ModuleClass/__init__/self',
            'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '''
            Summary of the description.
            
            Full description
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Summary of the description.
            
            Full description
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function',
        ]),
        'name': 'ModuleClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
          'tests.data.main_package.another_path.another_module.AnotherClass',
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass',
        'inherits_from_exception': False,
        'is_public': True,
        'methods': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function',
        ]),
        'name': 'NestedClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
          'another_path.another_module.AnotherClass',
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/_PrivateClass/public_attr_in_private_class',
          'tests/data/main_package/main_module/_PrivateClass/public_init_attr_in_private_class',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass',
        ]),
        'constructor': dict({
          'docstring': dict({
            'description': '',
            'examples': list([
            ]),
            'full_docstring': '',
          }),
          'id': 'tests/data/main_package/main_module/_PrivateClass/__init__',
          'is_class_method': False,
          'is_property': False,
          'is_public': False,
          'is_static': False,
          'name': '__init__',
          'parameters': list([
            'tests/data/main_package/main_module/_PrivateClass/__init__/self',
          ]),
          'reexported_by': list([
          ]),
          'results': list([
          ]),
        }),
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
          'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class',
        ]),
        'name': '_PrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/nested_class_attr',
        ]),
        'classes': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/NestedNestedPrivateClass',
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
          'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/static_nested_private_class_function',
        ]),
        'name': 'NestedPrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
      dict({
        'attributes': list([
        ]),
        'classes': list([
        ]),
        'constructor': None,
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/NestedNestedPrivateClass',
        'inherits_from_exception': False,
        'is_public': False,
        'methods': list([
        ]),
        'name': 'NestedNestedPrivateClass',
        'reexported_by': list([
        ]),
        'superclasses': list([
        ]),
        'type_parameters': list([
        ]),
      }),
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'another_function',
        'parameters': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'nested_class_function',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/self',
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/param_1',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Summary of the init description.
            
            Full init description.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Summary of the init description.
            
            Full init description.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/__init__/self',
          'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Function Docstring.
            
            Parameters
            ---------
            param_2 : bool, optional.
                Valid values are True and False.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Function Docstring.
            
            Parameters
            ---------
            param_2 : bool, optional.
                Valid values are True and False.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '_some_function',
        'parameters': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function/self',
          'tests/data/main_package/main_module/ModuleClass/_some_function/param_1',
          'tests/data/main_package/main_module/ModuleClass/_some_function/param_2',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/ModuleClass/_some_function/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/NestedPrivateClass/static_nested_private_class_function',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': True,
        'name': 'static_nested_private_class_function',
        'parameters': list([
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/__init__',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '__init__',
        'parameters': list([
          'tests/data/main_package/main_module/_PrivateClass/__init__/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': 'public_func_in_private_class',
        'parameters': list([
          'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class/self',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '',
          'examples': list([
          ]),
          'full_docstring': '',
        }),
        'id': 'tests/data/main_package/main_module/_private_global_func',
        'is_class_method': False,
        'is_property': False,
        'is_public': False,
        'is_static': False,
        'name': '_private_global_func',
        'parameters': list([
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/_private_global_func/result_1',
        ]),
      }),
      dict({
        'docstring': dict({
          'description': '''
            Docstring 1.
            
            Docstring 2.
          ''',
          'examples': list([
          ]),
          'full_docstring': '''
            Docstring 1.
            
            Docstring 2.
          ''',
        }),
        'id': 'tests/data/main_package/main_module/global_func',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func',
        'parameters': list([
          'tests/data/main_package/main_module/global_func/main_test_param_1',
          'tests/data/main_package/main_module/global_func/main_test_param_2',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/main_package/main_module/global_func/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package/another_path',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/main_package/another_path/another_module/AnotherClass',
          'tests/data/main_package/another_path/another_module/yetAnotherClass',
        ]),
        'docstring': '''
          Another Module Docstring.
          
          Full Docstring Description
  
        ''',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/main_package/another_path/another_module',
        'name': 'another_module',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
          'tests/data/main_package/main_module/ModuleClass',
          'tests/data/main_package/main_module/_PrivateClass',
        ]),
        'docstring': 'Docstring of the some_class.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/main_package/main_module/global_func',
          'tests/data/main_package/main_module/_private_global_func',
        ]),
        'id': 'tests/data/main_package/main_module',
        'name': 'main_module',
        'qualified_imports': list([
          dict({
            'alias': 'mathematics',
            'qualified_name': 'math',
          }),
          dict({
            'alias': None,
            'qualified_name': 'mypy',
          }),
          dict({
            'alias': None,
            'qualified_name': 'another_path.another_module.AnotherClass',
          }),
          dict({
            'alias': '_AcImportAlias',
            'qualified_name': 'another_path.another_module.AnotherClass',
          }),
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'main_package',
    'parameters': list([
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/param_1',
        'is_optional': False,
        'name': 'param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__/init_param_1',
        'is_optional': False,
        'name': 'init_param_1',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/param_1',
        'is_optional': False,
        'name': 'param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': False,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/param_2',
        'is_optional': True,
        'name': 'param_2',
        'type': dict({
          'kind': 'NamedType',
          'name': 'bool',
          'qname': 'builtins.bool',
        }),
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/__init__/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'IMPLICIT',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/_PrivateClass/public_func_in_private_class/self',
        'is_optional': False,
        'name': 'self',
        'type': None,
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '"first param"',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/global_func/main_test_param_1',
        'is_optional': True,
        'name': 'main_test_param_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': None,
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': '',
          'type': dict({
          }),
          'type_string': '',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/main_package/main_module/global_func/main_test_param_2',
        'is_optional': True,
        'name': 'main_test_param_2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'None',
              'qname': 'builtins.None',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/main_package/another_path/another_module/yetAnotherClass/another_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'str',
          'qname': 'builtins.str',
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/ModuleClass/NestedClass/nested_class_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'SetType',
          'types': list([
            dict({
              'kind': 'UnionType',
              'types': list([
                dict({
                  'kind': 'NamedType',
                  'name': 'bool',
                  'qname': 'builtins.bool',
                }),
                dict({
                  'kind': 'NamedType',
                  'name': 'None',
                  'qname': 'builtins.None',
                }),
              ]),
            }),
          ]),
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/ModuleClass/_some_function/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/_private_global_func/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'AnotherClass',
              'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
            }),
          ]),
        }),
      }),
      dict({
        'id': 'tests/data/main_package/main_module/global_func/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'AnotherClass',
          'qname': 'tests.data.main_package.another_path.another_module.AnotherClass',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
# name: test_main[purity]
  dict({
    'purity_package.__init__': dict({
    }),
    'purity_package.another_purity_path.__init__': dict({
    }),
    'purity_package.another_purity_path.another_purity_module': dict({
      'purity_package.another_purity_path.another_purity_module.__init__.5.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.42.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.64.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.64.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.76.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.88.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.88.4',
              'reason': 'GlobalVariable.global_var3',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.39.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.61.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.61.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.73.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.85.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.85.4',
              'reason': 'GlobalVariable.global_var3',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.21.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.21.4',
              'reason': 'GlobalVariable.global_var',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.36.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.58.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.58.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.18.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.33.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.55.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.55.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_T.30.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_T.52.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_T.52.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child.70.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_child.82.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_child.82.4',
              'reason': 'GlobalVariable.global_var3',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_impure.15.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_super_impure.15.4',
              'reason': 'GlobalVariable.global_var',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.only_in_super_pure.12.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.27.4': dict({
        'purity': 'Pure',
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.49.4': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.same_name.49.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.another_purity_path.another_purity_module.same_name.8.4': dict({
        'purity': 'Pure',
      }),
    }),
    'purity_package.main_purity_module': dict({
      'purity_package.main_purity_module.global_func_all_functions_pure.115.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_find_deeply_nested_function_impure.130.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_T.52.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_same_name_impure.167.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.same_name.49.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_from_docstring_same_name_pure.156.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.same_name.49.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_impure.152.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.same_name.49.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_from_parameter_same_name_pure.148.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_T_impure.100.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.85.4',
              'reason': 'GlobalVariable.global_var3',
            }),
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_impure.64.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_T_pure.90.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_child_of_child_impure.110.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_child_and_child_of_child_pure.85.4',
              'reason': 'GlobalVariable.global_var3',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_in_child_and_child_of_child_from_child_of_child_pure.105.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_T_impure.85.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_super_and_child_impure.58.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_T_pure.80.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_in_super_and_child_from_super_impure.71.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.in_super_and_child_pure.55.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_Child_impure.46.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_child.82.4',
              'reason': 'GlobalVariable.global_var3',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_Child_pure.41.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_T_from_Child_impure.36.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_T.52.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_T_from_Child_pure.31.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_T_impure.26.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_T.52.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_T_pure.17.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_T_impure.56.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_super_impure.15.4',
              'reason': 'GlobalVariable.global_var',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_T_pure.51.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_child_impure.66.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.only_in_super_impure.15.4',
              'reason': 'GlobalVariable.global_var',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_only_in_super_from_child_pure.61.0': dict({
        'purity': 'Pure',
      }),
      'purity_package.main_purity_module.global_func_same_name_impure.12.0': dict({
        'purity': 'Impure',
        'reasons': dict({
          'NonLocalVariableRead': list([
            dict({
              'origin': 'purity_package.another_purity_path.another_purity_module.same_name.49.4',
              'reason': 'GlobalVariable.global_var2',
            }),
          ]),
        }),
      }),
      'purity_package.main_purity_module.global_func_same_name_pure.7.0': dict({
        'purity': 'Pure',
      }),
    }),
  })
# ---
# name: test_main[restdoc - boundary - enum]
  dict({
    'attributes': list([
    ]),
    'classes': list([
    ]),
    'distribution': '',
    'enum_instances': list([
    ]),
    'enums': list([
    ]),
    'functions': list([
      dict({
        'docstring': dict({
          'description': 'Lorem ipsum',
          'examples': list([
          ]),
          'full_docstring': '''
            Lorem ipsum
            
            :param param1: 
                If "mean", then replace missing values using the mean along each column. 
                If "median", then replace missing values using the median along each column. 
                If "most_frequent", then replace missing using the most frequent value along each column. 
                If "constant", then replace missing values with fill_value.
            :type param1: int
            :param param2: Valid values are [False, None, 'sparse matrix']
            :type param2: str or bool
            :param param3: 
                Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative
                to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when
                updating these values (messages).
            :type param3: float
            :param param4:
                If bootstrap is True, the number of samples to draw from X to train each base estimator.
                If None (default), then draw X.shape[0] samples.
                If int, then max_samples values in [0, 10].
                If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].
            :type param4: int or float
          ''',
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest',
        'is_class_method': False,
        'is_property': False,
        'is_public': True,
        'is_static': False,
        'name': 'global_func1_rest',
        'parameters': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param1',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param2',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param3',
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param4',
        ]),
        'reexported_by': list([
        ]),
        'results': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/result_1',
        ]),
      }),
    ]),
    'modules': list([
      dict({
        'classes': list([
        ]),
        'docstring': '',
        'enums': list([
        ]),
        'functions': list([
        ]),
        'id': 'tests/data/boundary_enum_package_restdoc',
        'name': '__init__',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
      dict({
        'classes': list([
        ]),
        'docstring': 'ReST Docstring of the main_module_restdoc.py module.',
        'enums': list([
        ]),
        'functions': list([
          'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest',
        ]),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc',
        'name': 'main_module_restdoc',
        'qualified_imports': list([
        ]),
        'wildcard_imports': list([
        ]),
      }),
    ]),
    'package': 'boundary_enum_package_restdoc',
    'parameters': list([
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': 'If "mean", then replace missing values using the mean along each column.  If "median", then replace missing values using the median along each column.  If "most_frequent", then replace missing using the most frequent value along each column.  If "constant", then replace missing values with fill_value.',
          'type': dict({
            'kind': 'NamedType',
            'name': 'int',
            'qname': 'builtins.int',
          }),
          'type_string': 'int',
          'valid_values': list([
            '"constant"',
            '"mean"',
            '"median"',
            '"most_frequent"',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param1',
        'is_optional': False,
        'name': 'param1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'int',
          'qname': 'builtins.int',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
          ]),
          'default_value': '',
          'description': "Valid values are [False, None, 'sparse matrix']",
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'bool',
                'qname': 'builtins.bool',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'str',
                'qname': 'builtins.str',
              }),
            ]),
          }),
          'type_string': 'str | bool',
          'valid_values': list([
            '"sparse matrix"',
            'False',
            'None',
            'True',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param2',
        'is_optional': False,
        'name': 'param2',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'bool',
              'qname': 'builtins.bool',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'str',
              'qname': 'builtins.str',
            }),
          ]),
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': False,
              'min': 0.5,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': 'Damping factor in the range [0.5, 1.0) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages).',
          'type': dict({
            'kind': 'NamedType',
            'name': 'float',
            'qname': 'builtins.float',
          }),
          'type_string': 'float',
          'valid_values': list([
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param3',
        'is_optional': False,
        'name': 'param3',
        'type': dict({
          'kind': 'NamedType',
          'name': 'float',
          'qname': 'builtins.float',
        }),
      }),
      dict({
        'assigned_by': 'POSITION_OR_NAME',
        'default_value': '',
        'docstring': dict({
          'boundaries': list([
            dict({
              'base_type': 'float',
              'kind': 'BoundaryType',
              'max': 1.0,
              'max_inclusive': True,
              'min': 0.0,
              'min_inclusive': False,
            }),
            dict({
              'base_type': 'int',
              'kind': 'BoundaryType',
              'max': 10,
              'max_inclusive': True,
              'min': 0,
              'min_inclusive': True,
            }),
          ]),
          'default_value': '',
          'description': 'If bootstrap is True, the number of samples to draw from X to train each base estimator. If None (default), then draw X.shape[0] samples. If int, then max_samples values in [0, 10]. If float, then draw max_samples * X.shape[0] samples. Thus, max_samples should be in the interval (0.0, 1.0].',
          'type': dict({
            'kind': 'UnionType',
            'types': list([
              dict({
                'kind': 'NamedType',
                'name': 'float',
                'qname': 'builtins.float',
              }),
              dict({
                'kind': 'NamedType',
                'name': 'int',
                'qname': 'builtins.int',
              }),
            ]),
          }),
          'type_string': 'int | float',
          'valid_values': list([
            'None',
          ]),
        }),
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/param4',
        'is_optional': False,
        'name': 'param4',
        'type': dict({
          'kind': 'UnionType',
          'types': list([
            dict({
              'kind': 'NamedType',
              'name': 'float',
              'qname': 'builtins.float',
            }),
            dict({
              'kind': 'NamedType',
              'name': 'int',
              'qname': 'builtins.int',
            }),
          ]),
        }),
      }),
    ]),
    'results': list([
      dict({
        'id': 'tests/data/boundary_enum_package_restdoc/main_module_restdoc/global_func1_rest/result_1',
        'name': 'result_1',
        'type': dict({
          'kind': 'NamedType',
          'name': 'test',
          'qname': 'tests.data.boundary_enum_package_restdoc.main_module_restdoc.test',
        }),
      }),
    ]),
    'schemaVersion': 1,
    'version': '',
  })
# ---
