[tool.poetry]
name = "safe-ds-stubgen"
version = "0.3.0"
description = "Generation of Safe-DS stubs for Python libraries."
authors = ["Lars Reimann <mail@larsreimann.com>"]
license = "MIT"
readme = "docs/README.md"
repository = "https://github.com/Safe-DS/Stub-Generator"
documentation = "https://stubgen.readthedocs.io"
keywords = ["data-science", "machine-learning", "dsl"]
packages = [
    { include = "safeds_stubgen", from = "src"},
]

[tool.poetry.scripts]
safe-ds-stubgen = "safeds_stubgen.main:main"

[tool.poetry.dependencies]
python = "^3.11"
mypy = "^1.6.1"
griffe = ">=0.47.0,<1.8"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.4.3,<9.0.0"
pytest-cov = ">=4,<7"
syrupy = "^4.6.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-glightbox = ">=0.3.1,<0.5.0"
mkdocs-material = "^9.4.7"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
addopts = "--ignore=./tests/data --tb=short"

[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = ["tests/data"]

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "ARG",
    "PTH",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "NPY",
    "RUF"
]
ignore = [
    # line-too-long (handled by black)
    "E501",
    # tab-indentation (handled by black)
    "W191",
    # trailing-whitespace (handled by black)
    "W291",
    # missing-newline-at-end-of-file (handled by black)
    "W292",
    # blank-line-with-witespace (handled by black)
    "W293",
    # boolean-positional-arg-in-function-definition (we leave it to the call-site)
    "FBT001",
    # boolean-default-value-in-function-definition (we leave it to the call-site)
    "FBT002",
    # builtin-argument-shadowing (we want readable parameter names in our API)
    "A002",
    # builtin-attribute-shadowing (not an issue)
    "A003",
    # implicit-return (can add a return even though all cases are covered)
    "RET503",
    # superfluous-else-return (sometimes it's more readable)
    "RET505",
    # superfluous-else-raise (sometimes it's more readable)
    "RET506",
    # superfluous-else-continue (sometimes it's more readable)
    "RET507",
    # superfluous-else-break (sometimes it's more readable)
    "RET508",
    # private-member-access (we cannot always avoid it if we want a clean API)
    "SLF001",
    # if-else-block-instead-of-if-exp (an if-else block can be more readable)
    "SIM108",
    # compare-to-empty-string (sometimes it's better to be explicit)
    "PLC1901",
    # too-many-return-statements
    "PLR0911",
    # too-many-branches
    "PLR0912",
    # too-many-arguments
    "PLR0913",
    # too-many-statements
    "PLR0915",
    # magic-value-comparison
    "PLR2004",
    # raise-vanilla-args
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"*test*.py" = [
    # Undocumented declarations
    "D10",
]
"__init__.py" = [
    # runtime-import-in-type-checking-block: Does not work with apipkg.
    "TCH004",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
