@PythonModule("safeds.data.tabular.containers._column")
package safeds.data.tabular.containers.Column

from safeds.data.image.containers.Image import Image
from safeds.data.tabular.typing.ColumnType import ColumnType

class Column<T>(
	name: String,
	data: List<T>? = null
) {
	attr name: String
	@PythonName("number_of_rows") attr numberOfRows: Int
	attr type: ColumnType

	@Pure
	@PythonName("get_unique_values")
	fun getUniqueValues() -> result1: List<T>

	@Pure
	@PythonName("get_value")
	fun getValue(
		index: Int
	) -> result1: T

	@Pure
	fun all(
		predicate: (param1: T) -> param2: Boolean
	) -> result1: Boolean

	@Pure
	fun any(
		predicate: (param1: T) -> param2: Boolean
	) -> result1: Boolean

	@Pure
	fun none(
		predicate: (param1: T) -> param2: Boolean
	) -> result1: Boolean

	@Pure
	@PythonName("has_missing_values")
	fun hasMissingValues() -> result1: Boolean

	@Pure
	fun rename(
		@PythonName("new_name") newName: String
	) -> result1: Column

	@Pure
	fun transform<R>(
		transformer: (param1: T) -> param2: R
	) -> result1: Column

	@Pure
	@PythonName("correlation_with")
	fun correlationWith(
		@PythonName("other_column") otherColumn: Column
	) -> result1: Float

	@Pure
	fun idness() -> result1: Float

	@Pure
	fun maximum() -> result1: Float

	@Pure
	fun mean() -> result1: Float

	@Pure
	fun median() -> result1: Float

	@Pure
	fun minimum() -> result1: Float

	@Pure
	@PythonName("missing_value_ratio")
	fun missingValueRatio() -> result1: Float

	@Pure
	fun mode() -> result1: List<T>

	@Pure
	fun stability() -> result1: Float

	@Pure
	@PythonName("standard_deviation")
	fun standardDeviation() -> result1: Float

	@Pure
	fun sum() -> result1: Float

	@Pure
	fun variance() -> result1: Float

	@Pure
	@PythonName("plot_boxplot")
	fun plotBoxplot() -> result1: Image

	@Pure
	@PythonName("plot_histogram")
	fun plotHistogram() -> result1: Image

	@Pure
	@PythonName("to_html")
	fun toHtml() -> result1: String
}
