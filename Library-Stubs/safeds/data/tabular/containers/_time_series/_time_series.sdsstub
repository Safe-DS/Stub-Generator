@PythonModule("safeds.data.tabular.containers._time_series")
package safeds.data.tabular.containers.TimeSeries

from safeds.data.image.containers.Image import Image
from safeds.data.tabular.containers.Column import Column
from safeds.data.tabular.containers.Row import Row
from safeds.data.tabular.containers.Table import Table
from safeds.data.tabular.containers.TaggedTable import TaggedTable

class TimeSeries(
	data: Map<String, List<Any>>,
	@PythonName("target_name") targetName: String,
	@PythonName("time_name") timeName: String,
	@PythonName("feature_names") featureNames: List<String>? = null
) sub TaggedTable {
	attr time: Column

	@Pure
	@PythonName("add_column")
	fun addColumn(
		column: Column
	) -> result1: TimeSeries

	@Pure
	@PythonName("add_column_as_feature")
	fun addColumnAsFeature(
		column: Column
	) -> result1: TimeSeries

	@Pure
	@PythonName("add_columns_as_features")
	fun addColumnsAsFeatures(
		columns: union<List<Column>, Table>
	) -> result1: TimeSeries

	@Pure
	@PythonName("add_columns")
	fun addColumns(
		columns: union<List<Column>, Table>
	) -> result1: TimeSeries

	@Pure
	@PythonName("add_row")
	fun addRow(
		row: Row
	) -> result1: TimeSeries

	@Pure
	@PythonName("add_rows")
	fun addRows(
		rows: union<List<Row>, Table>
	) -> result1: TimeSeries

	@Pure
	@PythonName("filter_rows")
	fun filterRows(
		query: (param1: Row) -> param2: Boolean
	) -> result1: TimeSeries

	@Pure
	@PythonName("keep_only_columns")
	fun keepOnlyColumns(
		@PythonName("column_names") columnNames: List<String>
	) -> result1: TimeSeries

	@Pure
	@PythonName("remove_columns")
	fun removeColumns(
		@PythonName("column_names") columnNames: List<String>
	) -> result1: TimeSeries

	@Pure
	@PythonName("remove_columns_with_missing_values")
	fun removeColumnsWithMissingValues() -> result1: TimeSeries

	@Pure
	@PythonName("remove_columns_with_non_numerical_values")
	fun removeColumnsWithNonNumericalValues() -> result1: TimeSeries

	@Pure
	@PythonName("remove_duplicate_rows")
	fun removeDuplicateRows() -> result1: TimeSeries

	@Pure
	@PythonName("remove_rows_with_missing_values")
	fun removeRowsWithMissingValues() -> result1: TimeSeries

	@Pure
	@PythonName("remove_rows_with_outliers")
	fun removeRowsWithOutliers() -> result1: TimeSeries

	@Pure
	@PythonName("rename_column")
	fun renameColumn(
		@PythonName("old_name") oldName: String,
		@PythonName("new_name") newName: String
	) -> result1: TimeSeries

	@Pure
	@PythonName("replace_column")
	fun replaceColumn(
		@PythonName("old_column_name") oldColumnName: String,
		@PythonName("new_columns") newColumns: List<Column>
	) -> result1: TimeSeries

	@Pure
	@PythonName("slice_rows")
	fun sliceRows(
		start: Int? = null,
		end: Int? = null,
		step: Int = 1
	) -> result1: TimeSeries

	@Pure
	@PythonName("sort_columns")
	fun sortColumns(
		comparator: (param1: Column, param2: Column) -> param3: Int
	) -> result1: TimeSeries

	@Pure
	@PythonName("transform_column")
	fun transformColumn(
		name: String,
		transformer: (param1: Row) -> param2: Any
	) -> result1: TimeSeries

	@Pure
	@PythonName("plot_lagplot")
	fun plotLagplot(
		lag: Int
	) -> result1: Image
}
