package safeds.ml.nn

from safeds.data.image.containers import ImageList
from safeds.data.labeled.containers import TabularDataset
from safeds.data.labeled.containers import TimeSeriesDataset
from safeds.data.tabular.containers import Table

/**
 * A NeuralNetworkClassifier is a neural network that is used for classification tasks.
 *
 * @param inputConversion to convert the input data for the neural network
 * @param layers a list of layers for the neural network to learn
 */
class NeuralNetworkClassifier<IFT sub union<ImageDataset<Any>, TabularDataset, TimeSeriesDataset>, IPT sub union<ImageList, Table, TimeSeriesDataset>, IFT, IPT>(
    @PythonName("input_conversion") inputConversion: InputConversion<IFT, IPT>,
    layers: List<Layer>
) {
    /**
     * Whether the model is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean
    /**
     * The input size of the model.
     */
    @PythonName("input_size") attr inputSize: union<Int, ModelImageSize, Nothing?>

    /**
     * Load a pretrained model from a [Huggingface repository](https://huggingface.co/models/).
     *
     * @param huggingfaceRepo the name of the huggingface repository
     *
     * @result pretrainedModel the pretrained model as a NeuralNetworkClassifier
     */
    @Pure
    @PythonName("load_pretrained_model")
    static fun loadPretrainedModel(
        @PythonName("huggingface_repo") huggingfaceRepo: String
    ) -> pretrainedModel: NeuralNetworkClassifier<Any, Any>

    /**
     * Train the neural network with given training data.
     *
     * The original model is not modified.
     *
     * @param trainData The data the network should be trained on.
     * @param epochSize The number of times the training cycle should be done.
     * @param batchSize The size of data batches that should be loaded at one time.
     * @param learningRate The learning rate of the neural network.
     * @param callbackOnBatchCompletion Function used to view metrics while training. Gets called after a batch is completed with the index of the
     * last batch and the overall loss average.
     * @param callbackOnEpochCompletion Function used to view metrics while training. Gets called after an epoch is completed with the index of the
     * last epoch and the overall loss average.
     *
     * @result trainedModel The trained Model
     */
    @Pure
    fun fit(
        @PythonName("train_data") trainData: IFT,
        @PythonName("epoch_size") epochSize: Int = 25,
        @PythonName("batch_size") batchSize: Int = 1,
        @PythonName("learning_rate") learningRate: Float = 0.001,
        @PythonName("callback_on_batch_completion") callbackOnBatchCompletion: union<(param1: Int, param2: Float) -> (), Nothing?> = null,
        @PythonName("callback_on_epoch_completion") callbackOnEpochCompletion: union<(param1: Int, param2: Float) -> (), Nothing?> = null
    ) -> trainedModel: NeuralNetworkClassifier<IFT, IPT>

    /**
     * Use the hyperparameter choices to create multiple models and fit them.
     *
     * **Note:** This model is not modified.
     *
     * @param trainData The data the network should be trained on.
     * @param optimizationMetric The metric that should be used for determining the performance of a model.
     * @param positiveClass The class to be considered positive. Only needs to be provided when choosing precision, recall or f1_score as the optimization metric.
     * @param epochSize The number of times the training cycle should be done.
     * @param batchSize The size of data batches that should be loaded at one time.
     * @param learningRate The learning rate of the neural network.
     *
     * @result bestModel The model that performed the best out of all possible models given the Choices of hyperparameters.
     */
    @Pure
    @PythonName("fit_by_exhaustive_search")
    fun fitByExhaustiveSearch(
        @PythonName("train_data") trainData: IFT,
        @PythonName("optimization_metric") optimizationMetric: literal<"accuracy", "precision", "recall", "f1_score">,
        @PythonName("positive_class") positiveClass: Any = null,
        @PythonName("epoch_size") epochSize: Int = 25,
        @PythonName("batch_size") batchSize: Int = 1,
        @PythonName("learning_rate") learningRate: Float = 0.001
    ) -> bestModel: NeuralNetworkClassifier<IFT, IPT>

    /**
     * Make a prediction for the given test data.
     *
     * The original Model is not modified.
     *
     * @param testData The data the network should predict.
     *
     * @result prediction The given test_data with an added "prediction" column at the end
     */
    @Pure
    fun predict(
        @PythonName("test_data") testData: IPT
    ) -> prediction: IFT
}
