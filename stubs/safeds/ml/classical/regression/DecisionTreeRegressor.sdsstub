package safeds.ml.classical.regression

from safeds.data.labeled.containers import ExperimentalTabularDataset
from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import ExperimentalTable
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Decision tree regression.
 *
 * @param maximumDepth The maximum depth of each tree. If None, the depth is not limited. Has to be greater than 0.
 * @param minimumNumberOfSamplesInLeaves The minimum number of samples that must remain in the leaves of each tree. Has to be greater than 0.
 */
class DecisionTreeRegressor(
    @PythonName("maximum_depth") maximumDepth: Int? = null,
    @PythonName("minimum_number_of_samples_in_leaves") minimumNumberOfSamplesInLeaves: Int = 5
) sub Regressor {
    /**
     * The maximum depth of the tree.
     */
    @PythonName("maximum_depth") attr maximumDepth: Int?
    /**
     * The minimum number of samples that must remain in the leaves of the tree.
     */
    @PythonName("minimum_number_of_samples_in_leaves") attr minimumNumberOfSamplesInLeaves: Int
    /**
     * Whether the regressor is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: union<ExperimentalTabularDataset, TabularDataset>
    ) -> fittedRegressor: DecisionTreeRegressor

    /**
     * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
     *
     * @param dataset The dataset containing the feature vectors.
     *
     * @result table A dataset containing the given feature vectors and the predicted target vector.
     */
    @Pure
    fun predict(
        dataset: union<ExperimentalTable, ExperimentalTabularDataset, Table>
    ) -> table: TabularDataset
}
