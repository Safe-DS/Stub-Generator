package safeds.ml.classical.regression

from safeds.data.labeled.containers import ExperimentalTabularDataset
from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import ExperimentalTable
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Lasso regression.
 *
 * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
 */
class LassoRegressor(
    alpha: Float = 1.0
) sub Regressor {
    /**
     * Get the regularization of the model.
     */
    attr alpha: Float
    /**
     * Whether the regressor is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: union<ExperimentalTabularDataset, TabularDataset>
    ) -> fittedRegressor: LassoRegressor

    /**
     * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
     *
     * @param dataset The dataset containing the feature vectors.
     *
     * @result table A dataset containing the given feature vectors and the predicted target vector.
     */
    @Pure
    fun predict(
        dataset: union<ExperimentalTable, ExperimentalTabularDataset, Table>
    ) -> table: TabularDataset
}
