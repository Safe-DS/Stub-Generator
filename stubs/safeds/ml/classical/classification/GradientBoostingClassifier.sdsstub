package safeds.ml.classical.classification

from safeds.data.labeled.containers import ExperimentalTabularDataset
from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import ExperimentalTable
from safeds.data.tabular.containers import Table
from safeds.ml.classical.classification import Classifier

/**
 * Gradient boosting classification.
 *
 * @param numberOfTrees The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large
 * number usually results in better performance.
 * @param learningRate The larger the value, the more the model is influenced by each additional tree. If the learning rate is too
 * low, the model might underfit. If the learning rate is too high, the model might overfit.
 */
class GradientBoostingClassifier(
    @PythonName("number_of_trees") numberOfTrees: Int = 100,
    @PythonName("learning_rate") learningRate: Float = 0.1
) sub Classifier {
    /**
     * Get the number of trees (estimators) in the ensemble.
     */
    @PythonName("number_of_trees") attr numberOfTrees: Int
    /**
     * Get the learning rate.
     */
    @PythonName("learning_rate") attr learningRate: Float
    /**
     * Whether the classifier is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Create a copy of this classifier and fit it with the given training data.
     *
     * This classifier is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedClassifier The fitted classifier.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: union<ExperimentalTabularDataset, TabularDataset>
    ) -> fittedClassifier: GradientBoostingClassifier

    /**
     * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
     *
     * @param dataset The dataset containing the feature vectors.
     *
     * @result table A dataset containing the given feature vectors and the predicted target vector.
     */
    @Pure
    fun predict(
        dataset: union<ExperimentalTable, ExperimentalTabularDataset, Table>
    ) -> table: TabularDataset
}
