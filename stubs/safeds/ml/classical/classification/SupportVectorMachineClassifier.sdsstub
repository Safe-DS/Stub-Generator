package safeds.ml.classical.classification

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.classification import Classifier
from safeds.ml.classical.classification.SupportVectorMachine import SupportVectorMachineKernel

/**
 * Support vector machine.
 *
 * @param c The strength of regularization. Must be strictly positive.
 * @param kernel The type of kernel to be used. Defaults to None.
 */
class SupportVectorMachineClassifier(
    c: Float = 1.0,
    kernel: SupportVectorMachineKernel? = null
) sub Classifier {
    class Kernel() {
        class Linear() sub SupportVectorMachineKernel

        class Polynomial(
            degree: Int
        ) sub SupportVectorMachineKernel {
            /**
             * The degree of the polynomial kernel.
             */
            attr degree: Int
        }

        class Sigmoid() sub SupportVectorMachineKernel

        class RadialBasisFunction() sub SupportVectorMachineKernel
    }

    /**
     * Get the regularization strength.
     */
    attr c: Float
    /**
     * Get the type of kernel used.
     */
    attr kernel: SupportVectorMachineKernel
    /**
     * Whether the classifier is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Create a copy of this classifier and fit it with the given training data.
     *
     * This classifier is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedClassifier The fitted classifier.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedClassifier: SupportVectorMachineClassifier

    /**
     * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
     *
     * @param dataset The dataset containing the feature vectors.
     *
     * @result table A dataset containing the given feature vectors and the predicted target vector.
     */
    @Pure
    fun predict(
        dataset: Table
    ) -> table: TabularDataset
}
