package safeds.ml.classical.classification

from safeds.ml.classical.classification import Classifier

/**
 * Ada Boost classification.
 *
 * @param learner The learner from which the boosted ensemble is built.
 * @param maxLearnerCount The maximum number of learners at which boosting is terminated. In case of perfect fit, the learning procedure
 * is stopped early. Has to be greater than 0.
 * @param learningRate Weight applied to each classifier at each boosting iteration. A higher learning rate increases the contribution
 * of each classifier. Has to be greater than 0.
 */
class AdaBoostClassifier(
    learner: union<Choice<Classifier?>, Classifier, Nothing?> = null,
    @PythonName("max_learner_count") maxLearnerCount: union<Choice<Int>, Int> = 50,
    @PythonName("learning_rate") learningRate: union<Choice<Float>, Float> = 1.0
) sub Classifier {
    /**
     * The maximum number of learners in the ensemble.
     */
    @PythonName("max_learner_count") attr maxLearnerCount: union<Choice<Int>, Int>
    /**
     * The learning rate.
     */
    @PythonName("learning_rate") attr learningRate: union<Choice<Float>, Float>

    /**
     * The base learner used for training the ensemble.
     */
    attr learner: union<Choice<Classifier?>, Classifier, Nothing?>
}
