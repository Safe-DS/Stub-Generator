package safeds.data.labeled.containers

from safeds.data.image.containers import ImageList
from safeds.data.image.typing import ImageSize

/**
 * A Dataset for ImageLists as input and ImageLists, Tables or Columns as output.
 *
 * @param inputData the input ImageList
 * @param outputData the output data
 * @param batchSize the batch size used for training
 * @param shuffle whether the data should be shuffled after each epoch of training
 */
class ImageDataset<Out_co>(
    @PythonName("input_data") inputData: ImageList,
    @PythonName("output_data") outputData: OutCo,
    @PythonName("batch_size") batchSize: Int = 1,
    shuffle: Boolean = false
) {
    /**
     * Get the input `ImageSize` of this dataset.
     */
    @PythonName("input_size") attr inputSize: ImageSize
    /**
     * Get the output size of this dataset.
     */
    @PythonName("output_size") attr outputSize: union<ImageSize, Int>

    /**
     * Get the input data of this dataset.
     *
     * @result input the input data of this dataset
     */
    @Pure
    @PythonName("get_input")
    fun getInput() -> input: ImageList

    /**
     * Get the output data of this dataset.
     *
     * @result output the output data of this dataset
     */
    @Pure
    @PythonName("get_output")
    fun getOutput() -> output: OutCo

    /**
     * Return a new `ImageDataset` with shuffled data.
     *
     * The original dataset is not modified.
     *
     * @result imageDataset the shuffled `ImageDataset`
     */
    @Pure
    fun shuffle() -> imageDataset: ImageDataset<OutCo>

    /**
     * Create two image datasets by splitting the data of the current dataset.
     *
     * The first dataset contains a percentage of the data specified by `percentage_in_first`, and the second dataset
     * contains the remaining data.
     *
     * The original dataset is not modified.
     * By default, the data is shuffled before splitting. You can disable this by setting `shuffle` to False.
     *
     * @param percentageInFirst The percentage of data to include in the first dataset. Must be between 0 and 1.
     * @param shuffle Whether to shuffle the data before splitting.
     *
     * @result firstDataset The first dataset.
     * @result secondDataset The second dataset.
     */
    @Pure
    fun split(
        @PythonName("percentage_in_first") percentageInFirst: Float,
        shuffle: Boolean = true
    ) -> (firstDataset: ImageDataset<OutCo>, secondDataset: ImageDataset<OutCo>)
}
