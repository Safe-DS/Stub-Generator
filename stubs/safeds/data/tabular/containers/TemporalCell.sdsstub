package safeds.data.tabular.containers

from  import ValueError

/**
 * Namespace for operations on temporal data.
 *
 * This class cannot be instantiated directly. It can only be accessed using the `dt` attribute of a cell.
 *
 * @example
 * pipeline example {
 *     // from safeds.data.tabular.containers import Column
 *     // import datetime
 *     // column = Column("example", [datetime.date(2022, 1, 9)])
 *     // column.transform(lambda cell: cell.dt.date_to_string("%Y/%m/%d"))
 * }
 */
class TemporalCell {
    /**
     * Get the century of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 1)])
     *     // column.transform(lambda cell: cell.dt.century())
     * }
     */
    @Pure
    fun century() -> result1: Cell<Int>

    /**
     * Get the weekday of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 1)])
     *     // column.transform(lambda cell: cell.dt.weekday())
     * }
     */
    @Pure
    fun weekday() -> result1: Cell<Int>

    /**
     * Get the week of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 1)])
     *     // column.transform(lambda cell: cell.dt.week())
     * }
     */
    @Pure
    fun week() -> result1: Cell<Int>

    /**
     * Get the year of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 9)])
     *     // column.transform(lambda cell: cell.dt.year())
     * }
     */
    @Pure
    fun year() -> result1: Cell<Int>

    /**
     * Get the month of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 9)])
     *     // column.transform(lambda cell: cell.dt.month())
     * }
     */
    @Pure
    fun month() -> result1: Cell<Int>

    /**
     * Get the day of the underlying date(time) data.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 9)])
     *     // column.transform(lambda cell: cell.dt.day())
     * }
     */
    @Pure
    fun day() -> result1: Cell<Int>

    /**
     * Convert the date value in the cell to a string.
     *
     * @param formatString The format string it will be used to convert the data into the string.
     *
     * @result date The string value.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [ datetime.datetime(2022, 1, 9, 23, 29, 1, tzinfo=datetime.UTC)])
     *     // column.transform(lambda cell: cell.dt.datetime_to_string())
     * }
     */
    @Pure
    @PythonName("datetime_to_string")
    fun datetimeToString(
        @PythonName("format_string") formatString: String = "%Y/%m/%d %H:%M:%S"
    ) -> date: Cell<String>

    /**
     * Convert the date value in the cell to a string.
     *
     * @param formatString The format string it will be used to convert the data into the string.
     *
     * @result date The string value.
     * @result result1 If the formatstring is invalid.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import Column
     *     // import datetime
     *     // column = Column("example", [datetime.date(2022, 1, 9)])
     *     // column.transform(lambda cell: cell.dt.date_to_string())
     * }
     */
    @Pure
    @PythonName("date_to_string")
    fun dateToString(
        @PythonName("format_string") formatString: String = "%F"
    ) -> (result1: Cell<String>, result1: ValueError)
}
