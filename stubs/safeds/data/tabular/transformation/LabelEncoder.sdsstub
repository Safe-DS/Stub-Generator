package safeds.data.tabular.transformation

from safeds.data.tabular.containers import Table
from safeds.data.tabular.transformation import InvertibleTableTransformer

/**
 * The LabelEncoder encodes one or more given columns into labels.
 *
 * @param columnNames The list of columns used to fit the transformer. If `None`, all non-numeric columns are used.
 * @param partialOrder The partial order of the labels. The labels are encoded in the order of the given list. Additional values are
 * assigned labels in the order they are encountered during fitting.
 */
class LabelEncoder(
    @PythonName("column_names") columnNames: union<List<String>, String, Nothing?> = null,
    @PythonName("partial_order") partialOrder: List<Any>? = null
) sub InvertibleTableTransformer {
    /**
     * Whether the transformer is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean
    /**
     * The partial order of the labels.
     */
    @PythonName("partial_order") attr partialOrder: List<Any>

    /**
     * Learn a transformation for a set of columns in a table.
     *
     * This transformer is not modified.
     *
     * @param table The table used to fit the transformer.
     *
     * @result fittedTransformer The fitted transformer.
     */
    @Pure
    fun fit(
        table: Table
    ) -> fittedTransformer: LabelEncoder

    /**
     * Apply the learned transformation to a table.
     *
     * The table is not modified.
     *
     * @param table The table to which the learned transformation is applied.
     *
     * @result transformedTable The transformed table.
     */
    @Pure
    fun transform(
        table: Table
    ) -> transformedTable: Table

    /**
     * Undo the learned transformation.
     *
     * The table is not modified.
     *
     * @param transformedTable The table to be transformed back to the original version.
     *
     * @result originalTable The original table.
     */
    @Pure
    @PythonName("inverse_transform")
    fun inverseTransform(
        @PythonName("transformed_table") transformedTable: Table
    ) -> originalTable: Table
}
