package safeds.data.tabular.transformation

from safeds.data.tabular.containers import ExperimentalTable
from safeds.data.tabular.transformation import ExperimentalInvertibleTableTransformer

/**
 * A way to deal with categorical features that is particularly useful for unordered (i.e. nominal) data.
 *
 * It replaces a column with a set of columns, each representing a unique value in the original column. The value of
 * each new column is 1 if the original column had that value, and 0 otherwise. Take the following table as an
 * example:
 *
 * | col1 |
 * |------|
 * | "a"  |
 * | "b"  |
 * | "c"  |
 * | "a"  |
 *
 * The one-hot encoding of this table is:
 *
 * | col1__a | col1__b | col1__c |
 * |---------|---------|---------|
 * | 1       | 0       | 0       |
 * | 0       | 1       | 0       |
 * | 0       | 0       | 1       |
 * | 1       | 0       | 0       |
 *
 * The name "one-hot" comes from the fact that each row has exactly one 1 in it, and the rest of the values are 0s.
 * One-hot encoding is closely related to dummy variable / indicator variables, which are used in statistics.
 *
 * @example
 * pipeline example {
 *     // from safeds.data.tabular.containers import Table
 *     // from safeds.data.tabular.transformation import OneHotEncoder
 *     // table = Table({"col1": ["a", "b", "c", "a"]})
 *     // transformer = OneHotEncoder()
 *     // transformer.fit_and_transform(table, ["col1"])[1]
 * }
 */
class ExperimentalOneHotEncoder() sub ExperimentalInvertibleTableTransformer {
    /**
     * Whether the transformer is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Learn a transformation for a set of columns in a table.
     *
     * This transformer is not modified.
     *
     * @param table The table used to fit the transformer.
     * @param columnNames The list of columns from the table used to fit the transformer. If `None`, all columns are used.
     *
     * @result fittedTransformer The fitted transformer.
     */
    @Pure
    fun fit(
        table: ExperimentalTable,
        @PythonName("column_names") columnNames: List<String>?
    ) -> fittedTransformer: ExperimentalOneHotEncoder

    /**
     * Apply the learned transformation to a table.
     *
     * The table is not modified.
     *
     * @param table The table to which the learned transformation is applied.
     *
     * @result transformedTable The transformed table.
     */
    @Pure
    fun transform(
        table: ExperimentalTable
    ) -> transformedTable: ExperimentalTable

    /**
     * Undo the learned transformation.
     *
     * The table is not modified.
     *
     * @param transformedTable The table to be transformed back to the original version.
     *
     * @result table The original table.
     */
    @Pure
    @PythonName("inverse_transform")
    fun inverseTransform(
        @PythonName("transformed_table") transformedTable: ExperimentalTable
    ) -> table: ExperimentalTable

    /**
     * Get the names of all new columns that have been added by the OneHotEncoder.
     *
     * @result addedColumns A list of names of the added columns, ordered as they will appear in the table.
     */
    @Pure
    @PythonName("get_names_of_added_columns")
    fun getNamesOfAddedColumns() -> addedColumns: List<String>

    /**
     *  Get the names of all columns that have been changed by the OneHotEncoder (none).
     *
     * @result changedColumns The empty list.
     */
    @Pure
    @PythonName("get_names_of_changed_columns")
    fun getNamesOfChangedColumns() -> changedColumns: List<String>

    /**
     * Get the names of all columns that have been removed by the OneHotEncoder.
     *
     * @result removedColumns A list of names of the removed columns, ordered as they appear in the table the OneHotEncoder was fitted on.
     */
    @Pure
    @PythonName("get_names_of_removed_columns")
    fun getNamesOfRemovedColumns() -> removedColumns: List<String>
}
