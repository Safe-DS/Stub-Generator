package safeds.data.tabular.transformation

from safeds.data.tabular.containers import Table
from safeds.data.tabular.transformation import TableTransformer
from safeds.data.tabular.typing import ImputerStrategy

/**
 * Replace missing values with the given strategy.
 *
 * @param strategy The strategy used to impute missing values. Use the classes nested inside `Imputer.Strategy` to specify it.
 *
 * @example
 * pipeline example {
 *     // from safeds.data.tabular.containers import Column, Table
 *     // from safeds.data.tabular.transformation import Imputer
 *     //
 *     // table = Table.from_columns(
 *     //     [
 *     //         Column("a", [1, 3, None]),
 *     //         Column("b", [None, 2, 3]),
 *     //     ],
 *     // )
 *     // transformer = Imputer(Imputer.Strategy.Constant(0))
 *     // transformed_table = transformer.fit_and_transform(table)
 * }
 */
class Imputer(
    strategy: ImputerStrategy
) sub TableTransformer {
    class Strategy() {
        /**
         * An imputation strategy for imputing missing data with given constant values.
         *
         * @param value The given value to impute missing values.
         */
        class Constant(
            value: Any
        ) sub ImputerStrategy

        /**
         * An imputation strategy for imputing missing data with mean values.
         */
        class Mean() sub ImputerStrategy

        /**
         * An imputation strategy for imputing missing data with median values.
         */
        class Median() sub ImputerStrategy

        /**
         * An imputation strategy for imputing missing data with mode values.
         *
         * The lowest value will be used if there are multiple values with the same highest count.
         */
        class Mode() sub ImputerStrategy
    }

    /**
     * Whether the transformer is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Learn a transformation for a set of columns in a table.
     *
     * This transformer is not modified.
     *
     * @param table The table used to fit the transformer.
     * @param columnNames The list of columns from the table used to fit the transformer. If `None`, all columns are used.
     *
     * @result fittedTransformer The fitted transformer.
     */
    @Pure
    fun fit(
        table: Table,
        @PythonName("column_names") columnNames: List<String>?
    ) -> fittedTransformer: Imputer

    /**
     * Apply the learned transformation to a table.
     *
     * The table is not modified.
     *
     * @param table The table to which the learned transformation is applied.
     *
     * @result transformedTable The transformed table.
     */
    @Pure
    fun transform(
        table: Table
    ) -> transformedTable: Table

    /**
     * Get the names of all new columns that have been added by the Imputer.
     *
     * @result addedColumns A list of names of the added columns, ordered as they will appear in the table.
     */
    @Pure
    @PythonName("get_names_of_added_columns")
    fun getNamesOfAddedColumns() -> addedColumns: List<String>

    /**
     *  Get the names of all columns that may have been changed by the Imputer.
     *
     * @result changedColumns The list of (potentially) changed column names, as passed to fit.
     */
    @Pure
    @PythonName("get_names_of_changed_columns")
    fun getNamesOfChangedColumns() -> changedColumns: List<String>

    /**
     * Get the names of all columns that have been removed by the Imputer.
     *
     * @result removedColumns A list of names of the removed columns, ordered as they appear in the table the Imputer was fitted on.
     */
    @Pure
    @PythonName("get_names_of_removed_columns")
    fun getNamesOfRemovedColumns() -> removedColumns: List<String>
}
