package safeds.data.tabular.transformation

from safeds.data.tabular.containers import Table
from safeds.data.tabular.transformation import TableTransformer

/**
 * Replace missing values using the given strategy.
 *
 * @param strategy How to replace missing values.
 * @param columnNames The list of columns used to fit the transformer. If `None`, all columns are used.
 * @param valueToReplace The value that should be replaced.
 *
 * @example
 * pipeline example {
 *     // from safeds.data.tabular.containers import Column, Table
 *     // from safeds.data.tabular.transformation import SimpleImputer
 *     //
 *     // table = Table.from_columns(
 *     //     [
 *     //         Column("a", [1, 3, None]),
 *     //         Column("b", [None, 2, 3]),
 *     //     ],
 *     // )
 *     // transformer = SimpleImputer(SimpleImputer.Strategy.constant(0))
 *     // transformed_table = transformer.fit_and_transform(table)
 * }
 */
class SimpleImputer(
    strategy: Strategy,
    @PythonName("column_names") columnNames: union<List<String>, String, Nothing?> = null,
    @PythonName("value_to_replace") valueToReplace: union<Float, String, Nothing?> = null
) sub TableTransformer {
    /**
     * Various strategies to replace missing values.
     *
     * Use the static factory methods to create instances of this class.
     */
    class Strategy {
        /**
         * Replace missing values with the given constant value.
         *
         * @param value The value to replace missing values.
         */
        @Pure
        static fun constant(
            value: Any
        ) -> result1: Strategy

        /**
         * Replace missing values with the mean of each column.
         */
        @Pure
        static fun mean() -> result1: Strategy

        /**
         * Replace missing values with the median of each column.
         */
        @Pure
        static fun median() -> result1: Strategy

        /**
         * Replace missing values with the mode of each column.
         */
        @Pure
        static fun mode() -> result1: Strategy
    }

    /**
     * Whether the transformer is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean
    /**
     * The strategy used to replace missing values.
     */
    attr strategy: Strategy
    /**
     * The value that should be replaced.
     */
    @PythonName("value_to_replace") attr valueToReplace: Any

    /**
     * Learn a transformation for a set of columns in a table.
     *
     * This transformer is not modified.
     *
     * @param table The table used to fit the transformer.
     *
     * @result fittedTransformer The fitted transformer.
     */
    @Pure
    fun fit(
        table: Table
    ) -> fittedTransformer: SimpleImputer

    /**
     * Apply the learned transformation to a table.
     *
     * The table is not modified.
     *
     * @param table The table to which the learned transformation is applied.
     *
     * @result transformedTable The transformed table.
     */
    @Pure
    fun transform(
        table: Table
    ) -> transformedTable: Table
}
